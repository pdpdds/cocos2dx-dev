// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SFPacketStore.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SFPacketStore.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SFPacketStore {

namespace {

const ::google::protobuf::Descriptor* Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginSuccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginFail_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamInfo_TeamMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamInfo_TeamMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomMember_Member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomMember_Member_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterTeamMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterTeamMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveTeamMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveTeamMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvalidPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvalidPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterLobby_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterLobby_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomList_RoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomList_RoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomListRefresh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomListRefresh_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadingStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadingStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadingComplete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadingComplete_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayScoreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayScoreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayPlayerScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayPlayerScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeerList_PeerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeerList_PeerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_CREATE_PLAYER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_CREATE_PLAYER_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_DESTROY_PLAYER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_DESTROY_PLAYER_reflection_ = NULL;
const ::google::protobuf::Descriptor* PLAYER_IP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PLAYER_IP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ADD_PEER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ADD_PEER_reflection_ = NULL;
const ::google::protobuf::Descriptor* DELETE_PEER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DELETE_PEER_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TeamType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SFPacketStore_2eproto() {
  protobuf_AddDesc_SFPacketStore_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SFPacketStore.proto");
  GOOGLE_CHECK(file != NULL);
  Login_descriptor_ = file->message_type(0);
  static const int Login_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, password_),
  };
  Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_descriptor_,
      Login::default_instance_,
      Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login));
  LoginSuccess_descriptor_ = file->message_type(1);
  static const int LoginSuccess_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSuccess, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSuccess, userinfo_),
  };
  LoginSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginSuccess_descriptor_,
      LoginSuccess::default_instance_,
      LoginSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginSuccess));
  LoginFail_descriptor_ = file->message_type(2);
  static const int LoginFail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginFail, result_),
  };
  LoginFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginFail_descriptor_,
      LoginFail::default_instance_,
      LoginFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginFail));
  TeamInfo_descriptor_ = file->message_type(3);
  static const int TeamInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, member_),
  };
  TeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamInfo_descriptor_,
      TeamInfo::default_instance_,
      TeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamInfo));
  TeamInfo_TeamMember_descriptor_ = TeamInfo_descriptor_->nested_type(0);
  static const int TeamInfo_TeamMember_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo_TeamMember, member_),
  };
  TeamInfo_TeamMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamInfo_TeamMember_descriptor_,
      TeamInfo_TeamMember::default_instance_,
      TeamInfo_TeamMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo_TeamMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo_TeamMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamInfo_TeamMember));
  RoomMember_descriptor_ = file->message_type(4);
  static const int RoomMember_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMember, info_),
  };
  RoomMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomMember_descriptor_,
      RoomMember::default_instance_,
      RoomMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomMember));
  RoomMember_Member_descriptor_ = RoomMember_descriptor_->nested_type(0);
  static const int RoomMember_Member_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMember_Member, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMember_Member, playerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMember_Member, type_),
  };
  RoomMember_Member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomMember_Member_descriptor_,
      RoomMember_Member::default_instance_,
      RoomMember_Member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMember_Member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMember_Member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomMember_Member));
  EnterTeamMember_descriptor_ = file->message_type(5);
  static const int EnterTeamMember_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTeamMember, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTeamMember, playerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTeamMember, type_),
  };
  EnterTeamMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterTeamMember_descriptor_,
      EnterTeamMember::default_instance_,
      EnterTeamMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTeamMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTeamMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterTeamMember));
  LeaveTeamMember_descriptor_ = file->message_type(6);
  static const int LeaveTeamMember_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveTeamMember, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveTeamMember, playerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveTeamMember, type_),
  };
  LeaveTeamMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveTeamMember_descriptor_,
      LeaveTeamMember::default_instance_,
      LeaveTeamMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveTeamMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveTeamMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveTeamMember));
  InvalidPacket_descriptor_ = file->message_type(7);
  static const int InvalidPacket_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidPacket, arg_),
  };
  InvalidPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvalidPacket_descriptor_,
      InvalidPacket::default_instance_,
      InvalidPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvalidPacket));
  EnterLobby_descriptor_ = file->message_type(8);
  static const int EnterLobby_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterLobby, lobbyindex_),
  };
  EnterLobby_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterLobby_descriptor_,
      EnterLobby::default_instance_,
      EnterLobby_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterLobby, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterLobby, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterLobby));
  ChatReq_descriptor_ = file->message_type(9);
  static const int ChatReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, message_),
  };
  ChatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatReq_descriptor_,
      ChatReq::default_instance_,
      ChatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatReq));
  ChatRes_descriptor_ = file->message_type(10);
  static const int ChatRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRes, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRes, message_),
  };
  ChatRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRes_descriptor_,
      ChatRes::default_instance_,
      ChatRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRes));
  EnterRoom_descriptor_ = file->message_type(11);
  static const int EnterRoom_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoom, roomindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoom, gamemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoom, password_),
  };
  EnterRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterRoom_descriptor_,
      EnterRoom::default_instance_,
      EnterRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterRoom));
  CreateRoom_descriptor_ = file->message_type(12);
  static const int CreateRoom_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoom, gamemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoom, password_),
  };
  CreateRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateRoom_descriptor_,
      CreateRoom::default_instance_,
      CreateRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateRoom));
  LeaveRoom_descriptor_ = file->message_type(13);
  static const int LeaveRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoom, reason_),
  };
  LeaveRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveRoom_descriptor_,
      LeaveRoom::default_instance_,
      LeaveRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveRoom));
  RoomList_descriptor_ = file->message_type(14);
  static const int RoomList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomList, info_),
  };
  RoomList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomList_descriptor_,
      RoomList::default_instance_,
      RoomList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomList));
  RoomList_RoomInfo_descriptor_ = RoomList_descriptor_->nested_type(0);
  static const int RoomList_RoomInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomList_RoomInfo, roomindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomList_RoomInfo, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomList_RoomInfo, roomchief_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomList_RoomInfo, usercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomList_RoomInfo, maxusercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomList_RoomInfo, needpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomList_RoomInfo, gamemode_),
  };
  RoomList_RoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomList_RoomInfo_descriptor_,
      RoomList_RoomInfo::default_instance_,
      RoomList_RoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomList_RoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomList_RoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomList_RoomInfo));
  RoomListRefresh_descriptor_ = file->message_type(15);
  static const int RoomListRefresh_offsets_[1] = {
  };
  RoomListRefresh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomListRefresh_descriptor_,
      RoomListRefresh::default_instance_,
      RoomListRefresh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListRefresh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListRefresh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomListRefresh));
  ChangeTeam_descriptor_ = file->message_type(16);
  static const int ChangeTeam_offsets_[1] = {
  };
  ChangeTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeTeam_descriptor_,
      ChangeTeam::default_instance_,
      ChangeTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeTeam));
  LoadingStart_descriptor_ = file->message_type(17);
  static const int LoadingStart_offsets_[1] = {
  };
  LoadingStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoadingStart_descriptor_,
      LoadingStart::default_instance_,
      LoadingStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadingStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadingStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoadingStart));
  LoadingComplete_descriptor_ = file->message_type(18);
  static const int LoadingComplete_offsets_[1] = {
  };
  LoadingComplete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoadingComplete_descriptor_,
      LoadingComplete::default_instance_,
      LoadingComplete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadingComplete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadingComplete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoadingComplete));
  PlayStart_descriptor_ = file->message_type(19);
  static const int PlayStart_offsets_[1] = {
  };
  PlayStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayStart_descriptor_,
      PlayStart::default_instance_,
      PlayStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayStart));
  PlayMove_descriptor_ = file->message_type(20);
  static const int PlayMove_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayMove, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayMove, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayMove, posz_),
  };
  PlayMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayMove_descriptor_,
      PlayMove::default_instance_,
      PlayMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayMove));
  PlayEnd_descriptor_ = file->message_type(21);
  static const int PlayEnd_offsets_[1] = {
  };
  PlayEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayEnd_descriptor_,
      PlayEnd::default_instance_,
      PlayEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayEnd));
  PlayScoreInfo_descriptor_ = file->message_type(22);
  static const int PlayScoreInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayScoreInfo, redkillcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayScoreInfo, bluekillcount_),
  };
  PlayScoreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayScoreInfo_descriptor_,
      PlayScoreInfo::default_instance_,
      PlayScoreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayScoreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayScoreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayScoreInfo));
  PlayPlayerScore_descriptor_ = file->message_type(23);
  static const int PlayPlayerScore_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayPlayerScore, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayPlayerScore, teamtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayPlayerScore, kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayPlayerScore, death_),
  };
  PlayPlayerScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayPlayerScore_descriptor_,
      PlayPlayerScore::default_instance_,
      PlayPlayerScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayPlayerScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayPlayerScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayPlayerScore));
  PeerList_descriptor_ = file->message_type(24);
  static const int PeerList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerList, peer_),
  };
  PeerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PeerList_descriptor_,
      PeerList::default_instance_,
      PeerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PeerList));
  PeerList_PeerInfo_descriptor_ = PeerList_descriptor_->nested_type(0);
  static const int PeerList_PeerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerList_PeerInfo, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerList_PeerInfo, info_),
  };
  PeerList_PeerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PeerList_PeerInfo_descriptor_,
      PeerList_PeerInfo::default_instance_,
      PeerList_PeerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerList_PeerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerList_PeerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PeerList_PeerInfo));
  MSG_CREATE_PLAYER_descriptor_ = file->message_type(25);
  static const int MSG_CREATE_PLAYER_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CREATE_PLAYER, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CREATE_PLAYER, spawnindex_),
  };
  MSG_CREATE_PLAYER_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_CREATE_PLAYER_descriptor_,
      MSG_CREATE_PLAYER::default_instance_,
      MSG_CREATE_PLAYER_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CREATE_PLAYER, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CREATE_PLAYER, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_CREATE_PLAYER));
  MSG_DESTROY_PLAYER_descriptor_ = file->message_type(26);
  static const int MSG_DESTROY_PLAYER_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DESTROY_PLAYER, serial_),
  };
  MSG_DESTROY_PLAYER_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_DESTROY_PLAYER_descriptor_,
      MSG_DESTROY_PLAYER::default_instance_,
      MSG_DESTROY_PLAYER_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DESTROY_PLAYER, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DESTROY_PLAYER, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_DESTROY_PLAYER));
  PLAYER_IP_descriptor_ = file->message_type(27);
  static const int PLAYER_IP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PLAYER_IP, playerip_),
  };
  PLAYER_IP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PLAYER_IP_descriptor_,
      PLAYER_IP::default_instance_,
      PLAYER_IP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PLAYER_IP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PLAYER_IP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PLAYER_IP));
  ADD_PEER_descriptor_ = file->message_type(28);
  static const int ADD_PEER_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADD_PEER, addpeer_),
  };
  ADD_PEER_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ADD_PEER_descriptor_,
      ADD_PEER::default_instance_,
      ADD_PEER_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADD_PEER, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADD_PEER, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ADD_PEER));
  DELETE_PEER_descriptor_ = file->message_type(29);
  static const int DELETE_PEER_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DELETE_PEER, serial_),
  };
  DELETE_PEER_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DELETE_PEER_descriptor_,
      DELETE_PEER::default_instance_,
      DELETE_PEER_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DELETE_PEER, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DELETE_PEER, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DELETE_PEER));
  TeamType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SFPacketStore_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_descriptor_, &Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginSuccess_descriptor_, &LoginSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginFail_descriptor_, &LoginFail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamInfo_descriptor_, &TeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamInfo_TeamMember_descriptor_, &TeamInfo_TeamMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomMember_descriptor_, &RoomMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomMember_Member_descriptor_, &RoomMember_Member::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterTeamMember_descriptor_, &EnterTeamMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveTeamMember_descriptor_, &LeaveTeamMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvalidPacket_descriptor_, &InvalidPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterLobby_descriptor_, &EnterLobby::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatReq_descriptor_, &ChatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRes_descriptor_, &ChatRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterRoom_descriptor_, &EnterRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateRoom_descriptor_, &CreateRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveRoom_descriptor_, &LeaveRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomList_descriptor_, &RoomList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomList_RoomInfo_descriptor_, &RoomList_RoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomListRefresh_descriptor_, &RoomListRefresh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeTeam_descriptor_, &ChangeTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoadingStart_descriptor_, &LoadingStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoadingComplete_descriptor_, &LoadingComplete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayStart_descriptor_, &PlayStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayMove_descriptor_, &PlayMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayEnd_descriptor_, &PlayEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayScoreInfo_descriptor_, &PlayScoreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayPlayerScore_descriptor_, &PlayPlayerScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PeerList_descriptor_, &PeerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PeerList_PeerInfo_descriptor_, &PeerList_PeerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_CREATE_PLAYER_descriptor_, &MSG_CREATE_PLAYER::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_DESTROY_PLAYER_descriptor_, &MSG_DESTROY_PLAYER::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PLAYER_IP_descriptor_, &PLAYER_IP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ADD_PEER_descriptor_, &ADD_PEER::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DELETE_PEER_descriptor_, &DELETE_PEER::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SFPacketStore_2eproto() {
  delete Login::default_instance_;
  delete Login_reflection_;
  delete LoginSuccess::default_instance_;
  delete LoginSuccess_reflection_;
  delete LoginFail::default_instance_;
  delete LoginFail_reflection_;
  delete TeamInfo::default_instance_;
  delete TeamInfo_reflection_;
  delete TeamInfo_TeamMember::default_instance_;
  delete TeamInfo_TeamMember_reflection_;
  delete RoomMember::default_instance_;
  delete RoomMember_reflection_;
  delete RoomMember_Member::default_instance_;
  delete RoomMember_Member_reflection_;
  delete EnterTeamMember::default_instance_;
  delete EnterTeamMember_reflection_;
  delete LeaveTeamMember::default_instance_;
  delete LeaveTeamMember_reflection_;
  delete InvalidPacket::default_instance_;
  delete InvalidPacket_reflection_;
  delete EnterLobby::default_instance_;
  delete EnterLobby_reflection_;
  delete ChatReq::default_instance_;
  delete ChatReq_reflection_;
  delete ChatRes::default_instance_;
  delete ChatRes_reflection_;
  delete EnterRoom::default_instance_;
  delete EnterRoom_reflection_;
  delete CreateRoom::default_instance_;
  delete CreateRoom_reflection_;
  delete LeaveRoom::default_instance_;
  delete LeaveRoom_reflection_;
  delete RoomList::default_instance_;
  delete RoomList_reflection_;
  delete RoomList_RoomInfo::default_instance_;
  delete RoomList_RoomInfo_reflection_;
  delete RoomListRefresh::default_instance_;
  delete RoomListRefresh_reflection_;
  delete ChangeTeam::default_instance_;
  delete ChangeTeam_reflection_;
  delete LoadingStart::default_instance_;
  delete LoadingStart_reflection_;
  delete LoadingComplete::default_instance_;
  delete LoadingComplete_reflection_;
  delete PlayStart::default_instance_;
  delete PlayStart_reflection_;
  delete PlayMove::default_instance_;
  delete PlayMove_reflection_;
  delete PlayEnd::default_instance_;
  delete PlayEnd_reflection_;
  delete PlayScoreInfo::default_instance_;
  delete PlayScoreInfo_reflection_;
  delete PlayPlayerScore::default_instance_;
  delete PlayPlayerScore_reflection_;
  delete PeerList::default_instance_;
  delete PeerList_reflection_;
  delete PeerList_PeerInfo::default_instance_;
  delete PeerList_PeerInfo_reflection_;
  delete MSG_CREATE_PLAYER::default_instance_;
  delete MSG_CREATE_PLAYER_reflection_;
  delete MSG_DESTROY_PLAYER::default_instance_;
  delete MSG_DESTROY_PLAYER_reflection_;
  delete PLAYER_IP::default_instance_;
  delete PLAYER_IP_reflection_;
  delete ADD_PEER::default_instance_;
  delete ADD_PEER_reflection_;
  delete DELETE_PEER::default_instance_;
  delete DELETE_PEER_reflection_;
}

void protobuf_AddDesc_SFPacketStore_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023SFPacketStore.proto\022\rSFPacketStore\"+\n\005"
    "Login\022\020\n\010UserName\030\001 \002(\t\022\020\n\010Password\030\002 \002("
    "\t\"0\n\014LoginSuccess\022\016\n\006Result\030\001 \002(\005\022\020\n\010Use"
    "rInfo\030\002 \002(\014\"\033\n\tLoginFail\022\016\n\006Result\030\001 \002(\005"
    "\"\210\001\n\010TeamInfo\022*\n\004Type\030\001 \002(\0162\027.SFPacketSt"
    "ore.TeamType:\003RED\0222\n\006Member\030\006 \003(\0132\".SFPa"
    "cketStore.TeamInfo.TeamMember\032\034\n\nTeamMem"
    "ber\022\016\n\006Member\030\001 \002(\t\"\222\001\n\nRoomMember\022.\n\004In"
    "fo\030\014 \003(\0132 .SFPacketStore.RoomMember.Memb"
    "er\032T\n\006Member\022\016\n\006Member\030\001 \002(\t\022\023\n\013PlayerIn"
    "dex\030\002 \002(\005\022%\n\004Type\030\003 \002(\0162\027.SFPacketStore."
    "TeamType\"]\n\017EnterTeamMember\022\016\n\006Member\030\001 "
    "\002(\t\022\023\n\013PlayerIndex\030\002 \002(\005\022%\n\004Type\030\003 \002(\0162\027"
    ".SFPacketStore.TeamType\"]\n\017LeaveTeamMemb"
    "er\022\016\n\006Member\030\001 \002(\t\022\023\n\013PlayerIndex\030\002 \002(\005\022"
    "%\n\004Type\030\003 \002(\0162\027.SFPacketStore.TeamType\"\034"
    "\n\rInvalidPacket\022\013\n\003Arg\030\001 \002(\t\"#\n\nEnterLob"
    "by\022\025\n\nLobbyIndex\030\001 \001(\005:\0010\"\032\n\007ChatReq\022\017\n\007"
    "Message\030\001 \002(\t\"*\n\007ChatRes\022\016\n\006Sender\030\001 \002(\t"
    "\022\017\n\007Message\030\002 \002(\t\"B\n\tEnterRoom\022\021\n\tRoomIn"
    "dex\030\001 \002(\005\022\020\n\010GameMode\030\002 \002(\005\022\020\n\010Password\030"
    "\003 \001(\t\"0\n\nCreateRoom\022\020\n\010GameMode\030\001 \002(\005\022\020\n"
    "\010Password\030\002 \001(\t\"\036\n\tLeaveRoom\022\021\n\006Reason\030\001"
    " \001(\005:\0010\"\320\001\n\010RoomList\022.\n\004Info\030\n \003(\0132 .SFP"
    "acketStore.RoomList.RoomInfo\032\223\001\n\010RoomInf"
    "o\022\021\n\tRoomIndex\030\001 \002(\005\022\020\n\010RoomName\030\002 \002(\t\022\021"
    "\n\tRoomChief\030\003 \002(\t\022\021\n\tUserCount\030\004 \002(\005\022\024\n\014"
    "MaxUserCount\030\005 \002(\005\022\024\n\014NeedPassword\030\006 \002(\005"
    "\022\020\n\010GameMode\030\007 \002(\005\"\021\n\017RoomListRefresh\"\014\n"
    "\nChangeTeam\"\016\n\014LoadingStart\"\021\n\017LoadingCo"
    "mplete\"\013\n\tPlayStart\"4\n\010PlayMove\022\014\n\004PosX\030"
    "\001 \002(\002\022\014\n\004PosY\030\002 \002(\002\022\014\n\004PosZ\030\003 \002(\002\"\t\n\007Pla"
    "yEnd\"<\n\rPlayScoreInfo\022\024\n\014RedKillCount\030\001 "
    "\002(\005\022\025\n\rBlueKillCount\030\002 \002(\005\"N\n\017PlayPlayer"
    "Score\022\014\n\004name\030\001 \002(\t\022\020\n\010teamtype\030\002 \002(\005\022\014\n"
    "\004kill\030\003 \002(\005\022\r\n\005death\030\004 \002(\005\"d\n\010PeerList\022."
    "\n\004Peer\030\n \003(\0132 .SFPacketStore.PeerList.Pe"
    "erInfo\032(\n\010PeerInfo\022\016\n\006serial\030\001 \002(\005\022\014\n\004In"
    "fo\030\002 \002(\014\"7\n\021MSG_CREATE_PLAYER\022\016\n\006Serial\030"
    "\001 \002(\005\022\022\n\nspawnindex\030\002 \002(\005\"$\n\022MSG_DESTROY"
    "_PLAYER\022\016\n\006Serial\030\001 \002(\005\"\035\n\tPLAYER_IP\022\020\n\010"
    "playerip\030\001 \002(\014\"\033\n\010ADD_PEER\022\017\n\007addpeer\030\001 "
    "\002(\014\"\035\n\013DELETE_PEER\022\016\n\006serial\030\001 \002(\005*0\n\010Te"
    "amType\022\021\n\004NONE\020\377\377\377\377\377\377\377\377\377\001\022\007\n\003RED\020\000\022\010\n\004BL"
    "UE\020\001", 1764);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SFPacketStore.proto", &protobuf_RegisterTypes);
  Login::default_instance_ = new Login();
  LoginSuccess::default_instance_ = new LoginSuccess();
  LoginFail::default_instance_ = new LoginFail();
  TeamInfo::default_instance_ = new TeamInfo();
  TeamInfo_TeamMember::default_instance_ = new TeamInfo_TeamMember();
  RoomMember::default_instance_ = new RoomMember();
  RoomMember_Member::default_instance_ = new RoomMember_Member();
  EnterTeamMember::default_instance_ = new EnterTeamMember();
  LeaveTeamMember::default_instance_ = new LeaveTeamMember();
  InvalidPacket::default_instance_ = new InvalidPacket();
  EnterLobby::default_instance_ = new EnterLobby();
  ChatReq::default_instance_ = new ChatReq();
  ChatRes::default_instance_ = new ChatRes();
  EnterRoom::default_instance_ = new EnterRoom();
  CreateRoom::default_instance_ = new CreateRoom();
  LeaveRoom::default_instance_ = new LeaveRoom();
  RoomList::default_instance_ = new RoomList();
  RoomList_RoomInfo::default_instance_ = new RoomList_RoomInfo();
  RoomListRefresh::default_instance_ = new RoomListRefresh();
  ChangeTeam::default_instance_ = new ChangeTeam();
  LoadingStart::default_instance_ = new LoadingStart();
  LoadingComplete::default_instance_ = new LoadingComplete();
  PlayStart::default_instance_ = new PlayStart();
  PlayMove::default_instance_ = new PlayMove();
  PlayEnd::default_instance_ = new PlayEnd();
  PlayScoreInfo::default_instance_ = new PlayScoreInfo();
  PlayPlayerScore::default_instance_ = new PlayPlayerScore();
  PeerList::default_instance_ = new PeerList();
  PeerList_PeerInfo::default_instance_ = new PeerList_PeerInfo();
  MSG_CREATE_PLAYER::default_instance_ = new MSG_CREATE_PLAYER();
  MSG_DESTROY_PLAYER::default_instance_ = new MSG_DESTROY_PLAYER();
  PLAYER_IP::default_instance_ = new PLAYER_IP();
  ADD_PEER::default_instance_ = new ADD_PEER();
  DELETE_PEER::default_instance_ = new DELETE_PEER();
  Login::default_instance_->InitAsDefaultInstance();
  LoginSuccess::default_instance_->InitAsDefaultInstance();
  LoginFail::default_instance_->InitAsDefaultInstance();
  TeamInfo::default_instance_->InitAsDefaultInstance();
  TeamInfo_TeamMember::default_instance_->InitAsDefaultInstance();
  RoomMember::default_instance_->InitAsDefaultInstance();
  RoomMember_Member::default_instance_->InitAsDefaultInstance();
  EnterTeamMember::default_instance_->InitAsDefaultInstance();
  LeaveTeamMember::default_instance_->InitAsDefaultInstance();
  InvalidPacket::default_instance_->InitAsDefaultInstance();
  EnterLobby::default_instance_->InitAsDefaultInstance();
  ChatReq::default_instance_->InitAsDefaultInstance();
  ChatRes::default_instance_->InitAsDefaultInstance();
  EnterRoom::default_instance_->InitAsDefaultInstance();
  CreateRoom::default_instance_->InitAsDefaultInstance();
  LeaveRoom::default_instance_->InitAsDefaultInstance();
  RoomList::default_instance_->InitAsDefaultInstance();
  RoomList_RoomInfo::default_instance_->InitAsDefaultInstance();
  RoomListRefresh::default_instance_->InitAsDefaultInstance();
  ChangeTeam::default_instance_->InitAsDefaultInstance();
  LoadingStart::default_instance_->InitAsDefaultInstance();
  LoadingComplete::default_instance_->InitAsDefaultInstance();
  PlayStart::default_instance_->InitAsDefaultInstance();
  PlayMove::default_instance_->InitAsDefaultInstance();
  PlayEnd::default_instance_->InitAsDefaultInstance();
  PlayScoreInfo::default_instance_->InitAsDefaultInstance();
  PlayPlayerScore::default_instance_->InitAsDefaultInstance();
  PeerList::default_instance_->InitAsDefaultInstance();
  PeerList_PeerInfo::default_instance_->InitAsDefaultInstance();
  MSG_CREATE_PLAYER::default_instance_->InitAsDefaultInstance();
  MSG_DESTROY_PLAYER::default_instance_->InitAsDefaultInstance();
  PLAYER_IP::default_instance_->InitAsDefaultInstance();
  ADD_PEER::default_instance_->InitAsDefaultInstance();
  DELETE_PEER::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SFPacketStore_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SFPacketStore_2eproto {
  StaticDescriptorInitializer_SFPacketStore_2eproto() {
    protobuf_AddDesc_SFPacketStore_2eproto();
  }
} static_descriptor_initializer_SFPacketStore_2eproto_;
const ::google::protobuf::EnumDescriptor* TeamType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamType_descriptor_;
}
bool TeamType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Login::kUserNameFieldNumber;
const int Login::kPasswordFieldNumber;
#endif  // !_MSC_VER

Login::Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login::InitAsDefaultInstance() {
}

Login::Login(const Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login::~Login() {
  SharedDtor();
}

void Login::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_descriptor_;
}

const Login& Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

Login* Login::default_instance_ = NULL;

Login* Login::New() const {
  return new Login;
}

void Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string UserName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Password;
        break;
      }

      // required string Password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string UserName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // required string Password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string UserName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string Password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string UserName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string Password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Login::Swap(Login* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_descriptor_;
  metadata.reflection = Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginSuccess::kResultFieldNumber;
const int LoginSuccess::kUserInfoFieldNumber;
#endif  // !_MSC_VER

LoginSuccess::LoginSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginSuccess::InitAsDefaultInstance() {
}

LoginSuccess::LoginSuccess(const LoginSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginSuccess::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  userinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginSuccess::~LoginSuccess() {
  SharedDtor();
}

void LoginSuccess::SharedDtor() {
  if (userinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete userinfo_;
  }
  if (this != default_instance_) {
  }
}

void LoginSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginSuccess_descriptor_;
}

const LoginSuccess& LoginSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

LoginSuccess* LoginSuccess::default_instance_ = NULL;

LoginSuccess* LoginSuccess::New() const {
  return new LoginSuccess;
}

void LoginSuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_userinfo()) {
      if (userinfo_ != &::google::protobuf::internal::kEmptyString) {
        userinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UserInfo;
        break;
      }

      // required bytes UserInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required bytes UserInfo = 2;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required bytes UserInfo = 2;
  if (has_userinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required bytes UserInfo = 2;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginSuccess::MergeFrom(const LoginSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_userinfo()) {
      set_userinfo(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginSuccess::CopyFrom(const LoginSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginSuccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LoginSuccess::Swap(LoginSuccess* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginSuccess_descriptor_;
  metadata.reflection = LoginSuccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginFail::kResultFieldNumber;
#endif  // !_MSC_VER

LoginFail::LoginFail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginFail::InitAsDefaultInstance() {
}

LoginFail::LoginFail(const LoginFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginFail::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginFail::~LoginFail() {
  SharedDtor();
}

void LoginFail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginFail_descriptor_;
}

const LoginFail& LoginFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

LoginFail* LoginFail::default_instance_ = NULL;

LoginFail* LoginFail::New() const {
  return new LoginFail;
}

void LoginFail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginFail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginFail::MergeFrom(const LoginFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginFail::CopyFrom(const LoginFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginFail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginFail::Swap(LoginFail* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginFail_descriptor_;
  metadata.reflection = LoginFail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamInfo_TeamMember::kMemberFieldNumber;
#endif  // !_MSC_VER

TeamInfo_TeamMember::TeamInfo_TeamMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamInfo_TeamMember::InitAsDefaultInstance() {
}

TeamInfo_TeamMember::TeamInfo_TeamMember(const TeamInfo_TeamMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamInfo_TeamMember::SharedCtor() {
  _cached_size_ = 0;
  member_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamInfo_TeamMember::~TeamInfo_TeamMember() {
  SharedDtor();
}

void TeamInfo_TeamMember::SharedDtor() {
  if (member_ != &::google::protobuf::internal::kEmptyString) {
    delete member_;
  }
  if (this != default_instance_) {
  }
}

void TeamInfo_TeamMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamInfo_TeamMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamInfo_TeamMember_descriptor_;
}

const TeamInfo_TeamMember& TeamInfo_TeamMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

TeamInfo_TeamMember* TeamInfo_TeamMember::default_instance_ = NULL;

TeamInfo_TeamMember* TeamInfo_TeamMember::New() const {
  return new TeamInfo_TeamMember;
}

void TeamInfo_TeamMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_member()) {
      if (member_ != &::google::protobuf::internal::kEmptyString) {
        member_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamInfo_TeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Member = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_member()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->member().data(), this->member().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamInfo_TeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Member = 1;
  if (has_member()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->member().data(), this->member().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->member(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamInfo_TeamMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Member = 1;
  if (has_member()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->member().data(), this->member().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->member(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamInfo_TeamMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Member = 1;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->member());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamInfo_TeamMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamInfo_TeamMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamInfo_TeamMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamInfo_TeamMember::MergeFrom(const TeamInfo_TeamMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member()) {
      set_member(from.member());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamInfo_TeamMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInfo_TeamMember::CopyFrom(const TeamInfo_TeamMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInfo_TeamMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TeamInfo_TeamMember::Swap(TeamInfo_TeamMember* other) {
  if (other != this) {
    std::swap(member_, other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamInfo_TeamMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamInfo_TeamMember_descriptor_;
  metadata.reflection = TeamInfo_TeamMember_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TeamInfo::kTypeFieldNumber;
const int TeamInfo::kMemberFieldNumber;
#endif  // !_MSC_VER

TeamInfo::TeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamInfo::InitAsDefaultInstance() {
}

TeamInfo::TeamInfo(const TeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamInfo::~TeamInfo() {
  SharedDtor();
}

void TeamInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamInfo_descriptor_;
}

const TeamInfo& TeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

TeamInfo* TeamInfo::default_instance_ = NULL;

TeamInfo* TeamInfo::New() const {
  return new TeamInfo;
}

void TeamInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SFPacketStore.TeamType Type = 1 [default = RED];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SFPacketStore::TeamType_IsValid(value)) {
            set_type(static_cast< ::SFPacketStore::TeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Member;
        break;
      }

      // repeated .SFPacketStore.TeamInfo.TeamMember Member = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Member;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SFPacketStore.TeamType Type = 1 [default = RED];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .SFPacketStore.TeamInfo.TeamMember Member = 6;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->member(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SFPacketStore.TeamType Type = 1 [default = RED];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .SFPacketStore.TeamInfo.TeamMember Member = 6;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->member(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SFPacketStore.TeamType Type = 1 [default = RED];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .SFPacketStore.TeamInfo.TeamMember Member = 6;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamInfo::MergeFrom(const TeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInfo::CopyFrom(const TeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < member_size(); i++) {
    if (!this->member(i).IsInitialized()) return false;
  }
  return true;
}

void TeamInfo::Swap(TeamInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    member_.Swap(&other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamInfo_descriptor_;
  metadata.reflection = TeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomMember_Member::kMemberFieldNumber;
const int RoomMember_Member::kPlayerIndexFieldNumber;
const int RoomMember_Member::kTypeFieldNumber;
#endif  // !_MSC_VER

RoomMember_Member::RoomMember_Member()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomMember_Member::InitAsDefaultInstance() {
}

RoomMember_Member::RoomMember_Member(const RoomMember_Member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomMember_Member::SharedCtor() {
  _cached_size_ = 0;
  member_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerindex_ = 0;
  type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomMember_Member::~RoomMember_Member() {
  SharedDtor();
}

void RoomMember_Member::SharedDtor() {
  if (member_ != &::google::protobuf::internal::kEmptyString) {
    delete member_;
  }
  if (this != default_instance_) {
  }
}

void RoomMember_Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomMember_Member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomMember_Member_descriptor_;
}

const RoomMember_Member& RoomMember_Member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

RoomMember_Member* RoomMember_Member::default_instance_ = NULL;

RoomMember_Member* RoomMember_Member::New() const {
  return new RoomMember_Member;
}

void RoomMember_Member::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_member()) {
      if (member_ != &::google::protobuf::internal::kEmptyString) {
        member_->clear();
      }
    }
    playerindex_ = 0;
    type_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomMember_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Member = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_member()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->member().data(), this->member().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PlayerIndex;
        break;
      }

      // required int32 PlayerIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerindex_)));
          set_has_playerindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Type;
        break;
      }

      // required .SFPacketStore.TeamType Type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SFPacketStore::TeamType_IsValid(value)) {
            set_type(static_cast< ::SFPacketStore::TeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomMember_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Member = 1;
  if (has_member()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->member().data(), this->member().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->member(), output);
  }

  // required int32 PlayerIndex = 2;
  if (has_playerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerindex(), output);
  }

  // required .SFPacketStore.TeamType Type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomMember_Member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Member = 1;
  if (has_member()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->member().data(), this->member().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->member(), target);
  }

  // required int32 PlayerIndex = 2;
  if (has_playerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerindex(), target);
  }

  // required .SFPacketStore.TeamType Type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomMember_Member::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Member = 1;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->member());
    }

    // required int32 PlayerIndex = 2;
    if (has_playerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerindex());
    }

    // required .SFPacketStore.TeamType Type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomMember_Member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomMember_Member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomMember_Member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomMember_Member::MergeFrom(const RoomMember_Member& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member()) {
      set_member(from.member());
    }
    if (from.has_playerindex()) {
      set_playerindex(from.playerindex());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomMember_Member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomMember_Member::CopyFrom(const RoomMember_Member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomMember_Member::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RoomMember_Member::Swap(RoomMember_Member* other) {
  if (other != this) {
    std::swap(member_, other->member_);
    std::swap(playerindex_, other->playerindex_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomMember_Member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomMember_Member_descriptor_;
  metadata.reflection = RoomMember_Member_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RoomMember::kInfoFieldNumber;
#endif  // !_MSC_VER

RoomMember::RoomMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomMember::InitAsDefaultInstance() {
}

RoomMember::RoomMember(const RoomMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomMember::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomMember::~RoomMember() {
  SharedDtor();
}

void RoomMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomMember_descriptor_;
}

const RoomMember& RoomMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

RoomMember* RoomMember::default_instance_ = NULL;

RoomMember* RoomMember::New() const {
  return new RoomMember;
}

void RoomMember::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SFPacketStore.RoomMember.Member Info = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_Info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SFPacketStore.RoomMember.Member Info = 12;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SFPacketStore.RoomMember.Member Info = 12;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomMember::ByteSize() const {
  int total_size = 0;

  // repeated .SFPacketStore.RoomMember.Member Info = 12;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomMember::MergeFrom(const RoomMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomMember::CopyFrom(const RoomMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomMember::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void RoomMember::Swap(RoomMember* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomMember_descriptor_;
  metadata.reflection = RoomMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterTeamMember::kMemberFieldNumber;
const int EnterTeamMember::kPlayerIndexFieldNumber;
const int EnterTeamMember::kTypeFieldNumber;
#endif  // !_MSC_VER

EnterTeamMember::EnterTeamMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterTeamMember::InitAsDefaultInstance() {
}

EnterTeamMember::EnterTeamMember(const EnterTeamMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterTeamMember::SharedCtor() {
  _cached_size_ = 0;
  member_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerindex_ = 0;
  type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterTeamMember::~EnterTeamMember() {
  SharedDtor();
}

void EnterTeamMember::SharedDtor() {
  if (member_ != &::google::protobuf::internal::kEmptyString) {
    delete member_;
  }
  if (this != default_instance_) {
  }
}

void EnterTeamMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterTeamMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterTeamMember_descriptor_;
}

const EnterTeamMember& EnterTeamMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

EnterTeamMember* EnterTeamMember::default_instance_ = NULL;

EnterTeamMember* EnterTeamMember::New() const {
  return new EnterTeamMember;
}

void EnterTeamMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_member()) {
      if (member_ != &::google::protobuf::internal::kEmptyString) {
        member_->clear();
      }
    }
    playerindex_ = 0;
    type_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterTeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Member = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_member()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->member().data(), this->member().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PlayerIndex;
        break;
      }

      // required int32 PlayerIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerindex_)));
          set_has_playerindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Type;
        break;
      }

      // required .SFPacketStore.TeamType Type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SFPacketStore::TeamType_IsValid(value)) {
            set_type(static_cast< ::SFPacketStore::TeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterTeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Member = 1;
  if (has_member()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->member().data(), this->member().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->member(), output);
  }

  // required int32 PlayerIndex = 2;
  if (has_playerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerindex(), output);
  }

  // required .SFPacketStore.TeamType Type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterTeamMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Member = 1;
  if (has_member()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->member().data(), this->member().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->member(), target);
  }

  // required int32 PlayerIndex = 2;
  if (has_playerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerindex(), target);
  }

  // required .SFPacketStore.TeamType Type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterTeamMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Member = 1;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->member());
    }

    // required int32 PlayerIndex = 2;
    if (has_playerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerindex());
    }

    // required .SFPacketStore.TeamType Type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterTeamMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterTeamMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterTeamMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterTeamMember::MergeFrom(const EnterTeamMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member()) {
      set_member(from.member());
    }
    if (from.has_playerindex()) {
      set_playerindex(from.playerindex());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterTeamMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterTeamMember::CopyFrom(const EnterTeamMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterTeamMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EnterTeamMember::Swap(EnterTeamMember* other) {
  if (other != this) {
    std::swap(member_, other->member_);
    std::swap(playerindex_, other->playerindex_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterTeamMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterTeamMember_descriptor_;
  metadata.reflection = EnterTeamMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveTeamMember::kMemberFieldNumber;
const int LeaveTeamMember::kPlayerIndexFieldNumber;
const int LeaveTeamMember::kTypeFieldNumber;
#endif  // !_MSC_VER

LeaveTeamMember::LeaveTeamMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveTeamMember::InitAsDefaultInstance() {
}

LeaveTeamMember::LeaveTeamMember(const LeaveTeamMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveTeamMember::SharedCtor() {
  _cached_size_ = 0;
  member_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerindex_ = 0;
  type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveTeamMember::~LeaveTeamMember() {
  SharedDtor();
}

void LeaveTeamMember::SharedDtor() {
  if (member_ != &::google::protobuf::internal::kEmptyString) {
    delete member_;
  }
  if (this != default_instance_) {
  }
}

void LeaveTeamMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveTeamMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveTeamMember_descriptor_;
}

const LeaveTeamMember& LeaveTeamMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

LeaveTeamMember* LeaveTeamMember::default_instance_ = NULL;

LeaveTeamMember* LeaveTeamMember::New() const {
  return new LeaveTeamMember;
}

void LeaveTeamMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_member()) {
      if (member_ != &::google::protobuf::internal::kEmptyString) {
        member_->clear();
      }
    }
    playerindex_ = 0;
    type_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveTeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Member = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_member()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->member().data(), this->member().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PlayerIndex;
        break;
      }

      // required int32 PlayerIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerindex_)));
          set_has_playerindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Type;
        break;
      }

      // required .SFPacketStore.TeamType Type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SFPacketStore::TeamType_IsValid(value)) {
            set_type(static_cast< ::SFPacketStore::TeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaveTeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Member = 1;
  if (has_member()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->member().data(), this->member().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->member(), output);
  }

  // required int32 PlayerIndex = 2;
  if (has_playerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerindex(), output);
  }

  // required .SFPacketStore.TeamType Type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveTeamMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Member = 1;
  if (has_member()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->member().data(), this->member().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->member(), target);
  }

  // required int32 PlayerIndex = 2;
  if (has_playerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerindex(), target);
  }

  // required .SFPacketStore.TeamType Type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveTeamMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Member = 1;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->member());
    }

    // required int32 PlayerIndex = 2;
    if (has_playerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerindex());
    }

    // required .SFPacketStore.TeamType Type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveTeamMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveTeamMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveTeamMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveTeamMember::MergeFrom(const LeaveTeamMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member()) {
      set_member(from.member());
    }
    if (from.has_playerindex()) {
      set_playerindex(from.playerindex());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveTeamMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveTeamMember::CopyFrom(const LeaveTeamMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveTeamMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LeaveTeamMember::Swap(LeaveTeamMember* other) {
  if (other != this) {
    std::swap(member_, other->member_);
    std::swap(playerindex_, other->playerindex_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveTeamMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveTeamMember_descriptor_;
  metadata.reflection = LeaveTeamMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvalidPacket::kArgFieldNumber;
#endif  // !_MSC_VER

InvalidPacket::InvalidPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InvalidPacket::InitAsDefaultInstance() {
}

InvalidPacket::InvalidPacket(const InvalidPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InvalidPacket::SharedCtor() {
  _cached_size_ = 0;
  arg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvalidPacket::~InvalidPacket() {
  SharedDtor();
}

void InvalidPacket::SharedDtor() {
  if (arg_ != &::google::protobuf::internal::kEmptyString) {
    delete arg_;
  }
  if (this != default_instance_) {
  }
}

void InvalidPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvalidPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvalidPacket_descriptor_;
}

const InvalidPacket& InvalidPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

InvalidPacket* InvalidPacket::default_instance_ = NULL;

InvalidPacket* InvalidPacket::New() const {
  return new InvalidPacket;
}

void InvalidPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_arg()) {
      if (arg_ != &::google::protobuf::internal::kEmptyString) {
        arg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvalidPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Arg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->arg().data(), this->arg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvalidPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Arg = 1;
  if (has_arg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->arg().data(), this->arg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->arg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InvalidPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Arg = 1;
  if (has_arg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->arg().data(), this->arg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->arg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InvalidPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Arg = 1;
    if (has_arg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->arg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvalidPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvalidPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvalidPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvalidPacket::MergeFrom(const InvalidPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_arg()) {
      set_arg(from.arg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvalidPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvalidPacket::CopyFrom(const InvalidPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvalidPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InvalidPacket::Swap(InvalidPacket* other) {
  if (other != this) {
    std::swap(arg_, other->arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvalidPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvalidPacket_descriptor_;
  metadata.reflection = InvalidPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterLobby::kLobbyIndexFieldNumber;
#endif  // !_MSC_VER

EnterLobby::EnterLobby()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterLobby::InitAsDefaultInstance() {
}

EnterLobby::EnterLobby(const EnterLobby& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterLobby::SharedCtor() {
  _cached_size_ = 0;
  lobbyindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterLobby::~EnterLobby() {
  SharedDtor();
}

void EnterLobby::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterLobby::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterLobby_descriptor_;
}

const EnterLobby& EnterLobby::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

EnterLobby* EnterLobby::default_instance_ = NULL;

EnterLobby* EnterLobby::New() const {
  return new EnterLobby;
}

void EnterLobby::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lobbyindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 LobbyIndex = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobbyindex_)));
          set_has_lobbyindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 LobbyIndex = 1 [default = 0];
  if (has_lobbyindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lobbyindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterLobby::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 LobbyIndex = 1 [default = 0];
  if (has_lobbyindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lobbyindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterLobby::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 LobbyIndex = 1 [default = 0];
    if (has_lobbyindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobbyindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterLobby::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterLobby* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterLobby*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterLobby::MergeFrom(const EnterLobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lobbyindex()) {
      set_lobbyindex(from.lobbyindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterLobby::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterLobby::CopyFrom(const EnterLobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterLobby::IsInitialized() const {

  return true;
}

void EnterLobby::Swap(EnterLobby* other) {
  if (other != this) {
    std::swap(lobbyindex_, other->lobbyindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterLobby::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterLobby_descriptor_;
  metadata.reflection = EnterLobby_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatReq::kMessageFieldNumber;
#endif  // !_MSC_VER

ChatReq::ChatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatReq::InitAsDefaultInstance() {
}

ChatReq::ChatReq(const ChatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatReq::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatReq::~ChatReq() {
  SharedDtor();
}

void ChatReq::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void ChatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatReq_descriptor_;
}

const ChatReq& ChatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

ChatReq* ChatReq::default_instance_ = NULL;

ChatReq* ChatReq::New() const {
  return new ChatReq;
}

void ChatReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatReq::MergeFrom(const ChatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatReq::CopyFrom(const ChatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChatReq::Swap(ChatReq* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatReq_descriptor_;
  metadata.reflection = ChatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRes::kSenderFieldNumber;
const int ChatRes::kMessageFieldNumber;
#endif  // !_MSC_VER

ChatRes::ChatRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatRes::InitAsDefaultInstance() {
}

ChatRes::ChatRes(const ChatRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatRes::SharedCtor() {
  _cached_size_ = 0;
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRes::~ChatRes() {
  SharedDtor();
}

void ChatRes::SharedDtor() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void ChatRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRes_descriptor_;
}

const ChatRes& ChatRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

ChatRes* ChatRes::default_instance_ = NULL;

ChatRes* ChatRes::New() const {
  return new ChatRes;
}

void ChatRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::kEmptyString) {
        sender_->clear();
      }
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Sender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Message;
        break;
      }

      // required string Message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sender(), output);
  }

  // required string Message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sender(), target);
  }

  // required string Message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

    // required string Message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRes::MergeFrom(const ChatRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRes::CopyFrom(const ChatRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChatRes::Swap(ChatRes* other) {
  if (other != this) {
    std::swap(sender_, other->sender_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRes_descriptor_;
  metadata.reflection = ChatRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterRoom::kRoomIndexFieldNumber;
const int EnterRoom::kGameModeFieldNumber;
const int EnterRoom::kPasswordFieldNumber;
#endif  // !_MSC_VER

EnterRoom::EnterRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterRoom::InitAsDefaultInstance() {
}

EnterRoom::EnterRoom(const EnterRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterRoom::SharedCtor() {
  _cached_size_ = 0;
  roomindex_ = 0;
  gamemode_ = 0;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterRoom::~EnterRoom() {
  SharedDtor();
}

void EnterRoom::SharedDtor() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void EnterRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterRoom_descriptor_;
}

const EnterRoom& EnterRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

EnterRoom* EnterRoom::default_instance_ = NULL;

EnterRoom* EnterRoom::New() const {
  return new EnterRoom;
}

void EnterRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomindex_ = 0;
    gamemode_ = 0;
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 RoomIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomindex_)));
          set_has_roomindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GameMode;
        break;
      }

      // required int32 GameMode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GameMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamemode_)));
          set_has_gamemode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Password;
        break;
      }

      // optional string Password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 RoomIndex = 1;
  if (has_roomindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomindex(), output);
  }

  // required int32 GameMode = 2;
  if (has_gamemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gamemode(), output);
  }

  // optional string Password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 RoomIndex = 1;
  if (has_roomindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomindex(), target);
  }

  // required int32 GameMode = 2;
  if (has_gamemode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gamemode(), target);
  }

  // optional string Password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 RoomIndex = 1;
    if (has_roomindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomindex());
    }

    // required int32 GameMode = 2;
    if (has_gamemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamemode());
    }

    // optional string Password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterRoom::MergeFrom(const EnterRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomindex()) {
      set_roomindex(from.roomindex());
    }
    if (from.has_gamemode()) {
      set_gamemode(from.gamemode());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRoom::CopyFrom(const EnterRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EnterRoom::Swap(EnterRoom* other) {
  if (other != this) {
    std::swap(roomindex_, other->roomindex_);
    std::swap(gamemode_, other->gamemode_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterRoom_descriptor_;
  metadata.reflection = EnterRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateRoom::kGameModeFieldNumber;
const int CreateRoom::kPasswordFieldNumber;
#endif  // !_MSC_VER

CreateRoom::CreateRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateRoom::InitAsDefaultInstance() {
}

CreateRoom::CreateRoom(const CreateRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateRoom::SharedCtor() {
  _cached_size_ = 0;
  gamemode_ = 0;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRoom::~CreateRoom() {
  SharedDtor();
}

void CreateRoom::SharedDtor() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void CreateRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRoom_descriptor_;
}

const CreateRoom& CreateRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

CreateRoom* CreateRoom::default_instance_ = NULL;

CreateRoom* CreateRoom::New() const {
  return new CreateRoom;
}

void CreateRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gamemode_ = 0;
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 GameMode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamemode_)));
          set_has_gamemode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Password;
        break;
      }

      // optional string Password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 GameMode = 1;
  if (has_gamemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gamemode(), output);
  }

  // optional string Password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 GameMode = 1;
  if (has_gamemode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gamemode(), target);
  }

  // optional string Password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 GameMode = 1;
    if (has_gamemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamemode());
    }

    // optional string Password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateRoom::MergeFrom(const CreateRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamemode()) {
      set_gamemode(from.gamemode());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoom::CopyFrom(const CreateRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreateRoom::Swap(CreateRoom* other) {
  if (other != this) {
    std::swap(gamemode_, other->gamemode_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRoom_descriptor_;
  metadata.reflection = CreateRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveRoom::kReasonFieldNumber;
#endif  // !_MSC_VER

LeaveRoom::LeaveRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveRoom::InitAsDefaultInstance() {
}

LeaveRoom::LeaveRoom(const LeaveRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveRoom::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveRoom::~LeaveRoom() {
  SharedDtor();
}

void LeaveRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveRoom_descriptor_;
}

const LeaveRoom& LeaveRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

LeaveRoom* LeaveRoom::default_instance_ = NULL;

LeaveRoom* LeaveRoom::New() const {
  return new LeaveRoom;
}

void LeaveRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Reason = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaveRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Reason = 1 [default = 0];
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Reason = 1 [default = 0];
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Reason = 1 [default = 0];
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveRoom::MergeFrom(const LeaveRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveRoom::CopyFrom(const LeaveRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveRoom::IsInitialized() const {

  return true;
}

void LeaveRoom::Swap(LeaveRoom* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveRoom_descriptor_;
  metadata.reflection = LeaveRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomList_RoomInfo::kRoomIndexFieldNumber;
const int RoomList_RoomInfo::kRoomNameFieldNumber;
const int RoomList_RoomInfo::kRoomChiefFieldNumber;
const int RoomList_RoomInfo::kUserCountFieldNumber;
const int RoomList_RoomInfo::kMaxUserCountFieldNumber;
const int RoomList_RoomInfo::kNeedPasswordFieldNumber;
const int RoomList_RoomInfo::kGameModeFieldNumber;
#endif  // !_MSC_VER

RoomList_RoomInfo::RoomList_RoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomList_RoomInfo::InitAsDefaultInstance() {
}

RoomList_RoomInfo::RoomList_RoomInfo(const RoomList_RoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomList_RoomInfo::SharedCtor() {
  _cached_size_ = 0;
  roomindex_ = 0;
  roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomchief_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usercount_ = 0;
  maxusercount_ = 0;
  needpassword_ = 0;
  gamemode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomList_RoomInfo::~RoomList_RoomInfo() {
  SharedDtor();
}

void RoomList_RoomInfo::SharedDtor() {
  if (roomname_ != &::google::protobuf::internal::kEmptyString) {
    delete roomname_;
  }
  if (roomchief_ != &::google::protobuf::internal::kEmptyString) {
    delete roomchief_;
  }
  if (this != default_instance_) {
  }
}

void RoomList_RoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomList_RoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomList_RoomInfo_descriptor_;
}

const RoomList_RoomInfo& RoomList_RoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

RoomList_RoomInfo* RoomList_RoomInfo::default_instance_ = NULL;

RoomList_RoomInfo* RoomList_RoomInfo::New() const {
  return new RoomList_RoomInfo;
}

void RoomList_RoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomindex_ = 0;
    if (has_roomname()) {
      if (roomname_ != &::google::protobuf::internal::kEmptyString) {
        roomname_->clear();
      }
    }
    if (has_roomchief()) {
      if (roomchief_ != &::google::protobuf::internal::kEmptyString) {
        roomchief_->clear();
      }
    }
    usercount_ = 0;
    maxusercount_ = 0;
    needpassword_ = 0;
    gamemode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomList_RoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 RoomIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomindex_)));
          set_has_roomindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RoomName;
        break;
      }

      // required string RoomName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RoomChief;
        break;
      }

      // required string RoomChief = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomChief:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomchief()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomchief().data(), this->roomchief().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_UserCount;
        break;
      }

      // required int32 UserCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usercount_)));
          set_has_usercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_MaxUserCount;
        break;
      }

      // required int32 MaxUserCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxUserCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxusercount_)));
          set_has_maxusercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_NeedPassword;
        break;
      }

      // required int32 NeedPassword = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NeedPassword:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needpassword_)));
          set_has_needpassword();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_GameMode;
        break;
      }

      // required int32 GameMode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GameMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamemode_)));
          set_has_gamemode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomList_RoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 RoomIndex = 1;
  if (has_roomindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomindex(), output);
  }

  // required string RoomName = 2;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->roomname(), output);
  }

  // required string RoomChief = 3;
  if (has_roomchief()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomchief().data(), this->roomchief().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->roomchief(), output);
  }

  // required int32 UserCount = 4;
  if (has_usercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->usercount(), output);
  }

  // required int32 MaxUserCount = 5;
  if (has_maxusercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxusercount(), output);
  }

  // required int32 NeedPassword = 6;
  if (has_needpassword()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->needpassword(), output);
  }

  // required int32 GameMode = 7;
  if (has_gamemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gamemode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomList_RoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 RoomIndex = 1;
  if (has_roomindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomindex(), target);
  }

  // required string RoomName = 2;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roomname(), target);
  }

  // required string RoomChief = 3;
  if (has_roomchief()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomchief().data(), this->roomchief().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->roomchief(), target);
  }

  // required int32 UserCount = 4;
  if (has_usercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->usercount(), target);
  }

  // required int32 MaxUserCount = 5;
  if (has_maxusercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxusercount(), target);
  }

  // required int32 NeedPassword = 6;
  if (has_needpassword()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->needpassword(), target);
  }

  // required int32 GameMode = 7;
  if (has_gamemode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gamemode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomList_RoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 RoomIndex = 1;
    if (has_roomindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomindex());
    }

    // required string RoomName = 2;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }

    // required string RoomChief = 3;
    if (has_roomchief()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomchief());
    }

    // required int32 UserCount = 4;
    if (has_usercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usercount());
    }

    // required int32 MaxUserCount = 5;
    if (has_maxusercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxusercount());
    }

    // required int32 NeedPassword = 6;
    if (has_needpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needpassword());
    }

    // required int32 GameMode = 7;
    if (has_gamemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamemode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomList_RoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomList_RoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomList_RoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomList_RoomInfo::MergeFrom(const RoomList_RoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomindex()) {
      set_roomindex(from.roomindex());
    }
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
    if (from.has_roomchief()) {
      set_roomchief(from.roomchief());
    }
    if (from.has_usercount()) {
      set_usercount(from.usercount());
    }
    if (from.has_maxusercount()) {
      set_maxusercount(from.maxusercount());
    }
    if (from.has_needpassword()) {
      set_needpassword(from.needpassword());
    }
    if (from.has_gamemode()) {
      set_gamemode(from.gamemode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomList_RoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomList_RoomInfo::CopyFrom(const RoomList_RoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomList_RoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void RoomList_RoomInfo::Swap(RoomList_RoomInfo* other) {
  if (other != this) {
    std::swap(roomindex_, other->roomindex_);
    std::swap(roomname_, other->roomname_);
    std::swap(roomchief_, other->roomchief_);
    std::swap(usercount_, other->usercount_);
    std::swap(maxusercount_, other->maxusercount_);
    std::swap(needpassword_, other->needpassword_);
    std::swap(gamemode_, other->gamemode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomList_RoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomList_RoomInfo_descriptor_;
  metadata.reflection = RoomList_RoomInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RoomList::kInfoFieldNumber;
#endif  // !_MSC_VER

RoomList::RoomList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomList::InitAsDefaultInstance() {
}

RoomList::RoomList(const RoomList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomList::~RoomList() {
  SharedDtor();
}

void RoomList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomList_descriptor_;
}

const RoomList& RoomList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

RoomList* RoomList::default_instance_ = NULL;

RoomList* RoomList::New() const {
  return new RoomList;
}

void RoomList::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SFPacketStore.RoomList.RoomInfo Info = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_Info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SFPacketStore.RoomList.RoomInfo Info = 10;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SFPacketStore.RoomList.RoomInfo Info = 10;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomList::ByteSize() const {
  int total_size = 0;

  // repeated .SFPacketStore.RoomList.RoomInfo Info = 10;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomList::MergeFrom(const RoomList& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomList::CopyFrom(const RoomList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomList::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void RoomList::Swap(RoomList* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomList_descriptor_;
  metadata.reflection = RoomList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RoomListRefresh::RoomListRefresh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomListRefresh::InitAsDefaultInstance() {
}

RoomListRefresh::RoomListRefresh(const RoomListRefresh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomListRefresh::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomListRefresh::~RoomListRefresh() {
  SharedDtor();
}

void RoomListRefresh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomListRefresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomListRefresh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomListRefresh_descriptor_;
}

const RoomListRefresh& RoomListRefresh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

RoomListRefresh* RoomListRefresh::default_instance_ = NULL;

RoomListRefresh* RoomListRefresh::New() const {
  return new RoomListRefresh;
}

void RoomListRefresh::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomListRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RoomListRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomListRefresh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomListRefresh::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomListRefresh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomListRefresh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomListRefresh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomListRefresh::MergeFrom(const RoomListRefresh& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomListRefresh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomListRefresh::CopyFrom(const RoomListRefresh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomListRefresh::IsInitialized() const {

  return true;
}

void RoomListRefresh::Swap(RoomListRefresh* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomListRefresh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomListRefresh_descriptor_;
  metadata.reflection = RoomListRefresh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ChangeTeam::ChangeTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeTeam::InitAsDefaultInstance() {
}

ChangeTeam::ChangeTeam(const ChangeTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeTeam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeTeam::~ChangeTeam() {
  SharedDtor();
}

void ChangeTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeTeam_descriptor_;
}

const ChangeTeam& ChangeTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

ChangeTeam* ChangeTeam::default_instance_ = NULL;

ChangeTeam* ChangeTeam::New() const {
  return new ChangeTeam;
}

void ChangeTeam::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ChangeTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeTeam::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeTeam::MergeFrom(const ChangeTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeTeam::CopyFrom(const ChangeTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeTeam::IsInitialized() const {

  return true;
}

void ChangeTeam::Swap(ChangeTeam* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeTeam_descriptor_;
  metadata.reflection = ChangeTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LoadingStart::LoadingStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoadingStart::InitAsDefaultInstance() {
}

LoadingStart::LoadingStart(const LoadingStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoadingStart::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadingStart::~LoadingStart() {
  SharedDtor();
}

void LoadingStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoadingStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadingStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadingStart_descriptor_;
}

const LoadingStart& LoadingStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

LoadingStart* LoadingStart::default_instance_ = NULL;

LoadingStart* LoadingStart::New() const {
  return new LoadingStart;
}

void LoadingStart::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoadingStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void LoadingStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoadingStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoadingStart::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadingStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoadingStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoadingStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadingStart::MergeFrom(const LoadingStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoadingStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadingStart::CopyFrom(const LoadingStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadingStart::IsInitialized() const {

  return true;
}

void LoadingStart::Swap(LoadingStart* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoadingStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadingStart_descriptor_;
  metadata.reflection = LoadingStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LoadingComplete::LoadingComplete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoadingComplete::InitAsDefaultInstance() {
}

LoadingComplete::LoadingComplete(const LoadingComplete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoadingComplete::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadingComplete::~LoadingComplete() {
  SharedDtor();
}

void LoadingComplete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoadingComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadingComplete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadingComplete_descriptor_;
}

const LoadingComplete& LoadingComplete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

LoadingComplete* LoadingComplete::default_instance_ = NULL;

LoadingComplete* LoadingComplete::New() const {
  return new LoadingComplete;
}

void LoadingComplete::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoadingComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void LoadingComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoadingComplete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoadingComplete::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadingComplete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoadingComplete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoadingComplete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadingComplete::MergeFrom(const LoadingComplete& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoadingComplete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadingComplete::CopyFrom(const LoadingComplete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadingComplete::IsInitialized() const {

  return true;
}

void LoadingComplete::Swap(LoadingComplete* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoadingComplete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadingComplete_descriptor_;
  metadata.reflection = LoadingComplete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PlayStart::PlayStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayStart::InitAsDefaultInstance() {
}

PlayStart::PlayStart(const PlayStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayStart::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayStart::~PlayStart() {
  SharedDtor();
}

void PlayStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayStart_descriptor_;
}

const PlayStart& PlayStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

PlayStart* PlayStart::default_instance_ = NULL;

PlayStart* PlayStart::New() const {
  return new PlayStart;
}

void PlayStart::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PlayStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayStart::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayStart::MergeFrom(const PlayStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayStart::CopyFrom(const PlayStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayStart::IsInitialized() const {

  return true;
}

void PlayStart::Swap(PlayStart* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayStart_descriptor_;
  metadata.reflection = PlayStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayMove::kPosXFieldNumber;
const int PlayMove::kPosYFieldNumber;
const int PlayMove::kPosZFieldNumber;
#endif  // !_MSC_VER

PlayMove::PlayMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayMove::InitAsDefaultInstance() {
}

PlayMove::PlayMove(const PlayMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayMove::SharedCtor() {
  _cached_size_ = 0;
  posx_ = 0;
  posy_ = 0;
  posz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayMove::~PlayMove() {
  SharedDtor();
}

void PlayMove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayMove_descriptor_;
}

const PlayMove& PlayMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

PlayMove* PlayMove::default_instance_ = NULL;

PlayMove* PlayMove::New() const {
  return new PlayMove;
}

void PlayMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    posx_ = 0;
    posy_ = 0;
    posz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float PosX = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_PosY;
        break;
      }

      // required float PosY = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_PosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_PosZ;
        break;
      }

      // required float PosZ = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_PosZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float PosX = 1;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->posx(), output);
  }

  // required float PosY = 2;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->posy(), output);
  }

  // required float PosZ = 3;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->posz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float PosX = 1;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->posx(), target);
  }

  // required float PosY = 2;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->posy(), target);
  }

  // required float PosZ = 3;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->posz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float PosX = 1;
    if (has_posx()) {
      total_size += 1 + 4;
    }

    // required float PosY = 2;
    if (has_posy()) {
      total_size += 1 + 4;
    }

    // required float PosZ = 3;
    if (has_posz()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayMove::MergeFrom(const PlayMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayMove::CopyFrom(const PlayMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PlayMove::Swap(PlayMove* other) {
  if (other != this) {
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(posz_, other->posz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayMove_descriptor_;
  metadata.reflection = PlayMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PlayEnd::PlayEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayEnd::InitAsDefaultInstance() {
}

PlayEnd::PlayEnd(const PlayEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayEnd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayEnd::~PlayEnd() {
  SharedDtor();
}

void PlayEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayEnd_descriptor_;
}

const PlayEnd& PlayEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

PlayEnd* PlayEnd::default_instance_ = NULL;

PlayEnd* PlayEnd::New() const {
  return new PlayEnd;
}

void PlayEnd::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PlayEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayEnd::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayEnd::MergeFrom(const PlayEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayEnd::CopyFrom(const PlayEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayEnd::IsInitialized() const {

  return true;
}

void PlayEnd::Swap(PlayEnd* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayEnd_descriptor_;
  metadata.reflection = PlayEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayScoreInfo::kRedKillCountFieldNumber;
const int PlayScoreInfo::kBlueKillCountFieldNumber;
#endif  // !_MSC_VER

PlayScoreInfo::PlayScoreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayScoreInfo::InitAsDefaultInstance() {
}

PlayScoreInfo::PlayScoreInfo(const PlayScoreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayScoreInfo::SharedCtor() {
  _cached_size_ = 0;
  redkillcount_ = 0;
  bluekillcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayScoreInfo::~PlayScoreInfo() {
  SharedDtor();
}

void PlayScoreInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayScoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayScoreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayScoreInfo_descriptor_;
}

const PlayScoreInfo& PlayScoreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

PlayScoreInfo* PlayScoreInfo::default_instance_ = NULL;

PlayScoreInfo* PlayScoreInfo::New() const {
  return new PlayScoreInfo;
}

void PlayScoreInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    redkillcount_ = 0;
    bluekillcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayScoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 RedKillCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &redkillcount_)));
          set_has_redkillcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BlueKillCount;
        break;
      }

      // required int32 BlueKillCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BlueKillCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bluekillcount_)));
          set_has_bluekillcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayScoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 RedKillCount = 1;
  if (has_redkillcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->redkillcount(), output);
  }

  // required int32 BlueKillCount = 2;
  if (has_bluekillcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bluekillcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayScoreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 RedKillCount = 1;
  if (has_redkillcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->redkillcount(), target);
  }

  // required int32 BlueKillCount = 2;
  if (has_bluekillcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bluekillcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayScoreInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 RedKillCount = 1;
    if (has_redkillcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->redkillcount());
    }

    // required int32 BlueKillCount = 2;
    if (has_bluekillcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bluekillcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayScoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayScoreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayScoreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayScoreInfo::MergeFrom(const PlayScoreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_redkillcount()) {
      set_redkillcount(from.redkillcount());
    }
    if (from.has_bluekillcount()) {
      set_bluekillcount(from.bluekillcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayScoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayScoreInfo::CopyFrom(const PlayScoreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayScoreInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlayScoreInfo::Swap(PlayScoreInfo* other) {
  if (other != this) {
    std::swap(redkillcount_, other->redkillcount_);
    std::swap(bluekillcount_, other->bluekillcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayScoreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayScoreInfo_descriptor_;
  metadata.reflection = PlayScoreInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayPlayerScore::kNameFieldNumber;
const int PlayPlayerScore::kTeamtypeFieldNumber;
const int PlayPlayerScore::kKillFieldNumber;
const int PlayPlayerScore::kDeathFieldNumber;
#endif  // !_MSC_VER

PlayPlayerScore::PlayPlayerScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayPlayerScore::InitAsDefaultInstance() {
}

PlayPlayerScore::PlayPlayerScore(const PlayPlayerScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayPlayerScore::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  teamtype_ = 0;
  kill_ = 0;
  death_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayPlayerScore::~PlayPlayerScore() {
  SharedDtor();
}

void PlayPlayerScore::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PlayPlayerScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayPlayerScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayPlayerScore_descriptor_;
}

const PlayPlayerScore& PlayPlayerScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

PlayPlayerScore* PlayPlayerScore::default_instance_ = NULL;

PlayPlayerScore* PlayPlayerScore::New() const {
  return new PlayPlayerScore;
}

void PlayPlayerScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    teamtype_ = 0;
    kill_ = 0;
    death_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayPlayerScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_teamtype;
        break;
      }

      // required int32 teamtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamtype_)));
          set_has_teamtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kill;
        break;
      }

      // required int32 kill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_)));
          set_has_kill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_death;
        break;
      }

      // required int32 death = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_death:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &death_)));
          set_has_death();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayPlayerScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required int32 teamtype = 2;
  if (has_teamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->teamtype(), output);
  }

  // required int32 kill = 3;
  if (has_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kill(), output);
  }

  // required int32 death = 4;
  if (has_death()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->death(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayPlayerScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 teamtype = 2;
  if (has_teamtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->teamtype(), target);
  }

  // required int32 kill = 3;
  if (has_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kill(), target);
  }

  // required int32 death = 4;
  if (has_death()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->death(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayPlayerScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 teamtype = 2;
    if (has_teamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamtype());
    }

    // required int32 kill = 3;
    if (has_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill());
    }

    // required int32 death = 4;
    if (has_death()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->death());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayPlayerScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayPlayerScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayPlayerScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayPlayerScore::MergeFrom(const PlayPlayerScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_teamtype()) {
      set_teamtype(from.teamtype());
    }
    if (from.has_kill()) {
      set_kill(from.kill());
    }
    if (from.has_death()) {
      set_death(from.death());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayPlayerScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayPlayerScore::CopyFrom(const PlayPlayerScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayPlayerScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PlayPlayerScore::Swap(PlayPlayerScore* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(teamtype_, other->teamtype_);
    std::swap(kill_, other->kill_);
    std::swap(death_, other->death_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayPlayerScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayPlayerScore_descriptor_;
  metadata.reflection = PlayPlayerScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PeerList_PeerInfo::kSerialFieldNumber;
const int PeerList_PeerInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

PeerList_PeerInfo::PeerList_PeerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PeerList_PeerInfo::InitAsDefaultInstance() {
}

PeerList_PeerInfo::PeerList_PeerInfo(const PeerList_PeerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PeerList_PeerInfo::SharedCtor() {
  _cached_size_ = 0;
  serial_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PeerList_PeerInfo::~PeerList_PeerInfo() {
  SharedDtor();
}

void PeerList_PeerInfo::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void PeerList_PeerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerList_PeerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerList_PeerInfo_descriptor_;
}

const PeerList_PeerInfo& PeerList_PeerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

PeerList_PeerInfo* PeerList_PeerInfo::default_instance_ = NULL;

PeerList_PeerInfo* PeerList_PeerInfo::New() const {
  return new PeerList_PeerInfo;
}

void PeerList_PeerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serial_ = 0;
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PeerList_PeerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serial = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Info;
        break;
      }

      // required bytes Info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PeerList_PeerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 serial = 1;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serial(), output);
  }

  // required bytes Info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PeerList_PeerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 serial = 1;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serial(), target);
  }

  // required bytes Info = 2;
  if (has_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PeerList_PeerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 serial = 1;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial());
    }

    // required bytes Info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerList_PeerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PeerList_PeerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeerList_PeerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeerList_PeerInfo::MergeFrom(const PeerList_PeerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PeerList_PeerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerList_PeerInfo::CopyFrom(const PeerList_PeerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerList_PeerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PeerList_PeerInfo::Swap(PeerList_PeerInfo* other) {
  if (other != this) {
    std::swap(serial_, other->serial_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PeerList_PeerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeerList_PeerInfo_descriptor_;
  metadata.reflection = PeerList_PeerInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PeerList::kPeerFieldNumber;
#endif  // !_MSC_VER

PeerList::PeerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PeerList::InitAsDefaultInstance() {
}

PeerList::PeerList(const PeerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PeerList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PeerList::~PeerList() {
  SharedDtor();
}

void PeerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PeerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerList_descriptor_;
}

const PeerList& PeerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

PeerList* PeerList::default_instance_ = NULL;

PeerList* PeerList::New() const {
  return new PeerList;
}

void PeerList::Clear() {
  peer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PeerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SFPacketStore.PeerList.PeerInfo Peer = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_peer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_Peer;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PeerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SFPacketStore.PeerList.PeerInfo Peer = 10;
  for (int i = 0; i < this->peer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->peer(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PeerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SFPacketStore.PeerList.PeerInfo Peer = 10;
  for (int i = 0; i < this->peer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->peer(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PeerList::ByteSize() const {
  int total_size = 0;

  // repeated .SFPacketStore.PeerList.PeerInfo Peer = 10;
  total_size += 1 * this->peer_size();
  for (int i = 0; i < this->peer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->peer(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PeerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeerList::MergeFrom(const PeerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  peer_.MergeFrom(from.peer_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PeerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerList::CopyFrom(const PeerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerList::IsInitialized() const {

  for (int i = 0; i < peer_size(); i++) {
    if (!this->peer(i).IsInitialized()) return false;
  }
  return true;
}

void PeerList::Swap(PeerList* other) {
  if (other != this) {
    peer_.Swap(&other->peer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PeerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeerList_descriptor_;
  metadata.reflection = PeerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_CREATE_PLAYER::kSerialFieldNumber;
const int MSG_CREATE_PLAYER::kSpawnindexFieldNumber;
#endif  // !_MSC_VER

MSG_CREATE_PLAYER::MSG_CREATE_PLAYER()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_CREATE_PLAYER::InitAsDefaultInstance() {
}

MSG_CREATE_PLAYER::MSG_CREATE_PLAYER(const MSG_CREATE_PLAYER& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_CREATE_PLAYER::SharedCtor() {
  _cached_size_ = 0;
  serial_ = 0;
  spawnindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_CREATE_PLAYER::~MSG_CREATE_PLAYER() {
  SharedDtor();
}

void MSG_CREATE_PLAYER::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MSG_CREATE_PLAYER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_CREATE_PLAYER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_CREATE_PLAYER_descriptor_;
}

const MSG_CREATE_PLAYER& MSG_CREATE_PLAYER::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

MSG_CREATE_PLAYER* MSG_CREATE_PLAYER::default_instance_ = NULL;

MSG_CREATE_PLAYER* MSG_CREATE_PLAYER::New() const {
  return new MSG_CREATE_PLAYER;
}

void MSG_CREATE_PLAYER::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serial_ = 0;
    spawnindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_CREATE_PLAYER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Serial = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_spawnindex;
        break;
      }

      // required int32 spawnindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spawnindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spawnindex_)));
          set_has_spawnindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_CREATE_PLAYER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Serial = 1;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serial(), output);
  }

  // required int32 spawnindex = 2;
  if (has_spawnindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->spawnindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_CREATE_PLAYER::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Serial = 1;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serial(), target);
  }

  // required int32 spawnindex = 2;
  if (has_spawnindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->spawnindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_CREATE_PLAYER::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Serial = 1;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial());
    }

    // required int32 spawnindex = 2;
    if (has_spawnindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spawnindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_CREATE_PLAYER::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_CREATE_PLAYER* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_CREATE_PLAYER*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_CREATE_PLAYER::MergeFrom(const MSG_CREATE_PLAYER& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_spawnindex()) {
      set_spawnindex(from.spawnindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_CREATE_PLAYER::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_CREATE_PLAYER::CopyFrom(const MSG_CREATE_PLAYER& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_CREATE_PLAYER::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MSG_CREATE_PLAYER::Swap(MSG_CREATE_PLAYER* other) {
  if (other != this) {
    std::swap(serial_, other->serial_);
    std::swap(spawnindex_, other->spawnindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_CREATE_PLAYER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_CREATE_PLAYER_descriptor_;
  metadata.reflection = MSG_CREATE_PLAYER_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_DESTROY_PLAYER::kSerialFieldNumber;
#endif  // !_MSC_VER

MSG_DESTROY_PLAYER::MSG_DESTROY_PLAYER()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_DESTROY_PLAYER::InitAsDefaultInstance() {
}

MSG_DESTROY_PLAYER::MSG_DESTROY_PLAYER(const MSG_DESTROY_PLAYER& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_DESTROY_PLAYER::SharedCtor() {
  _cached_size_ = 0;
  serial_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_DESTROY_PLAYER::~MSG_DESTROY_PLAYER() {
  SharedDtor();
}

void MSG_DESTROY_PLAYER::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MSG_DESTROY_PLAYER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_DESTROY_PLAYER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_DESTROY_PLAYER_descriptor_;
}

const MSG_DESTROY_PLAYER& MSG_DESTROY_PLAYER::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

MSG_DESTROY_PLAYER* MSG_DESTROY_PLAYER::default_instance_ = NULL;

MSG_DESTROY_PLAYER* MSG_DESTROY_PLAYER::New() const {
  return new MSG_DESTROY_PLAYER;
}

void MSG_DESTROY_PLAYER::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serial_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_DESTROY_PLAYER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Serial = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_DESTROY_PLAYER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Serial = 1;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serial(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_DESTROY_PLAYER::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Serial = 1;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serial(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_DESTROY_PLAYER::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Serial = 1;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_DESTROY_PLAYER::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_DESTROY_PLAYER* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_DESTROY_PLAYER*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_DESTROY_PLAYER::MergeFrom(const MSG_DESTROY_PLAYER& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial()) {
      set_serial(from.serial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_DESTROY_PLAYER::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DESTROY_PLAYER::CopyFrom(const MSG_DESTROY_PLAYER& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DESTROY_PLAYER::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MSG_DESTROY_PLAYER::Swap(MSG_DESTROY_PLAYER* other) {
  if (other != this) {
    std::swap(serial_, other->serial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_DESTROY_PLAYER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_DESTROY_PLAYER_descriptor_;
  metadata.reflection = MSG_DESTROY_PLAYER_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PLAYER_IP::kPlayeripFieldNumber;
#endif  // !_MSC_VER

PLAYER_IP::PLAYER_IP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PLAYER_IP::InitAsDefaultInstance() {
}

PLAYER_IP::PLAYER_IP(const PLAYER_IP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PLAYER_IP::SharedCtor() {
  _cached_size_ = 0;
  playerip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PLAYER_IP::~PLAYER_IP() {
  SharedDtor();
}

void PLAYER_IP::SharedDtor() {
  if (playerip_ != &::google::protobuf::internal::kEmptyString) {
    delete playerip_;
  }
  if (this != default_instance_) {
  }
}

void PLAYER_IP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PLAYER_IP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PLAYER_IP_descriptor_;
}

const PLAYER_IP& PLAYER_IP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

PLAYER_IP* PLAYER_IP::default_instance_ = NULL;

PLAYER_IP* PLAYER_IP::New() const {
  return new PLAYER_IP;
}

void PLAYER_IP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerip()) {
      if (playerip_ != &::google::protobuf::internal::kEmptyString) {
        playerip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PLAYER_IP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes playerip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_playerip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PLAYER_IP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes playerip = 1;
  if (has_playerip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->playerip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PLAYER_IP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes playerip = 1;
  if (has_playerip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->playerip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PLAYER_IP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes playerip = 1;
    if (has_playerip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->playerip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PLAYER_IP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PLAYER_IP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PLAYER_IP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PLAYER_IP::MergeFrom(const PLAYER_IP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerip()) {
      set_playerip(from.playerip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PLAYER_IP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PLAYER_IP::CopyFrom(const PLAYER_IP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PLAYER_IP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PLAYER_IP::Swap(PLAYER_IP* other) {
  if (other != this) {
    std::swap(playerip_, other->playerip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PLAYER_IP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PLAYER_IP_descriptor_;
  metadata.reflection = PLAYER_IP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ADD_PEER::kAddpeerFieldNumber;
#endif  // !_MSC_VER

ADD_PEER::ADD_PEER()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ADD_PEER::InitAsDefaultInstance() {
}

ADD_PEER::ADD_PEER(const ADD_PEER& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ADD_PEER::SharedCtor() {
  _cached_size_ = 0;
  addpeer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ADD_PEER::~ADD_PEER() {
  SharedDtor();
}

void ADD_PEER::SharedDtor() {
  if (addpeer_ != &::google::protobuf::internal::kEmptyString) {
    delete addpeer_;
  }
  if (this != default_instance_) {
  }
}

void ADD_PEER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADD_PEER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADD_PEER_descriptor_;
}

const ADD_PEER& ADD_PEER::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

ADD_PEER* ADD_PEER::default_instance_ = NULL;

ADD_PEER* ADD_PEER::New() const {
  return new ADD_PEER;
}

void ADD_PEER::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_addpeer()) {
      if (addpeer_ != &::google::protobuf::internal::kEmptyString) {
        addpeer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ADD_PEER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes addpeer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_addpeer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ADD_PEER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes addpeer = 1;
  if (has_addpeer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->addpeer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ADD_PEER::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes addpeer = 1;
  if (has_addpeer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->addpeer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ADD_PEER::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes addpeer = 1;
    if (has_addpeer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->addpeer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADD_PEER::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ADD_PEER* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ADD_PEER*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ADD_PEER::MergeFrom(const ADD_PEER& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addpeer()) {
      set_addpeer(from.addpeer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ADD_PEER::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADD_PEER::CopyFrom(const ADD_PEER& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADD_PEER::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ADD_PEER::Swap(ADD_PEER* other) {
  if (other != this) {
    std::swap(addpeer_, other->addpeer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ADD_PEER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ADD_PEER_descriptor_;
  metadata.reflection = ADD_PEER_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DELETE_PEER::kSerialFieldNumber;
#endif  // !_MSC_VER

DELETE_PEER::DELETE_PEER()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DELETE_PEER::InitAsDefaultInstance() {
}

DELETE_PEER::DELETE_PEER(const DELETE_PEER& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DELETE_PEER::SharedCtor() {
  _cached_size_ = 0;
  serial_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DELETE_PEER::~DELETE_PEER() {
  SharedDtor();
}

void DELETE_PEER::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DELETE_PEER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DELETE_PEER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DELETE_PEER_descriptor_;
}

const DELETE_PEER& DELETE_PEER::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SFPacketStore_2eproto();
  return *default_instance_;
}

DELETE_PEER* DELETE_PEER::default_instance_ = NULL;

DELETE_PEER* DELETE_PEER::New() const {
  return new DELETE_PEER;
}

void DELETE_PEER::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serial_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DELETE_PEER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serial = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DELETE_PEER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 serial = 1;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serial(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DELETE_PEER::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 serial = 1;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serial(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DELETE_PEER::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 serial = 1;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DELETE_PEER::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DELETE_PEER* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DELETE_PEER*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DELETE_PEER::MergeFrom(const DELETE_PEER& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial()) {
      set_serial(from.serial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DELETE_PEER::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DELETE_PEER::CopyFrom(const DELETE_PEER& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DELETE_PEER::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DELETE_PEER::Swap(DELETE_PEER* other) {
  if (other != this) {
    std::swap(serial_, other->serial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DELETE_PEER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DELETE_PEER_descriptor_;
  metadata.reflection = DELETE_PEER_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SFPacketStore

// @@protoc_insertion_point(global_scope)
