// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SevenGamePacket.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SevenGamePacket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SevenGamePacket {

namespace {

const ::google::protobuf::Descriptor* InitCardCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitCardCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitCardCount_CardCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitCardCount_CardCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerID_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyCardInfo_PlayerCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyCardInfo_PlayerCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableUpdate_AddCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableUpdate_AddCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurrentTurn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrentTurn_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnPass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnPass_reflection_ = NULL;
const ::google::protobuf::Descriptor* CardSubmit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardSubmit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Winner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Winner_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserDie_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserDie_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SevenGamePacket_2eproto() {
  protobuf_AddDesc_SevenGamePacket_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SevenGamePacket.proto");
  GOOGLE_CHECK(file != NULL);
  InitCardCount_descriptor_ = file->message_type(0);
  static const int InitCardCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitCardCount, info_),
  };
  InitCardCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitCardCount_descriptor_,
      InitCardCount::default_instance_,
      InitCardCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitCardCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitCardCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitCardCount));
  InitCardCount_CardCount_descriptor_ = InitCardCount_descriptor_->nested_type(0);
  static const int InitCardCount_CardCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitCardCount_CardCount, playerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitCardCount_CardCount, cardcount_),
  };
  InitCardCount_CardCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitCardCount_CardCount_descriptor_,
      InitCardCount_CardCount::default_instance_,
      InitCardCount_CardCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitCardCount_CardCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitCardCount_CardCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitCardCount_CardCount));
  PlayerID_descriptor_ = file->message_type(1);
  static const int PlayerID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerID, playerindex_),
  };
  PlayerID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerID_descriptor_,
      PlayerID::default_instance_,
      PlayerID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerID));
  MyCardInfo_descriptor_ = file->message_type(2);
  static const int MyCardInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyCardInfo, card_),
  };
  MyCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MyCardInfo_descriptor_,
      MyCardInfo::default_instance_,
      MyCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MyCardInfo));
  MyCardInfo_PlayerCard_descriptor_ = MyCardInfo_descriptor_->nested_type(0);
  static const int MyCardInfo_PlayerCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyCardInfo_PlayerCard, cardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyCardInfo_PlayerCard, cardtype_),
  };
  MyCardInfo_PlayerCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MyCardInfo_PlayerCard_descriptor_,
      MyCardInfo_PlayerCard::default_instance_,
      MyCardInfo_PlayerCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyCardInfo_PlayerCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyCardInfo_PlayerCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MyCardInfo_PlayerCard));
  TableUpdate_descriptor_ = file->message_type(3);
  static const int TableUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableUpdate, card_),
  };
  TableUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableUpdate_descriptor_,
      TableUpdate::default_instance_,
      TableUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableUpdate));
  TableUpdate_AddCard_descriptor_ = TableUpdate_descriptor_->nested_type(0);
  static const int TableUpdate_AddCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableUpdate_AddCard, cardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableUpdate_AddCard, cardtype_),
  };
  TableUpdate_AddCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableUpdate_AddCard_descriptor_,
      TableUpdate_AddCard::default_instance_,
      TableUpdate_AddCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableUpdate_AddCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableUpdate_AddCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableUpdate_AddCard));
  CurrentTurn_descriptor_ = file->message_type(4);
  static const int CurrentTurn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentTurn, playerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentTurn, playername_),
  };
  CurrentTurn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurrentTurn_descriptor_,
      CurrentTurn::default_instance_,
      CurrentTurn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentTurn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentTurn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurrentTurn));
  TurnPass_descriptor_ = file->message_type(5);
  static const int TurnPass_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnPass, playerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnPass, ticketcount_),
  };
  TurnPass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnPass_descriptor_,
      TurnPass::default_instance_,
      TurnPass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnPass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnPass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnPass));
  CardSubmit_descriptor_ = file->message_type(6);
  static const int CardSubmit_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSubmit, playerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSubmit, cardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSubmit, cardtype_),
  };
  CardSubmit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CardSubmit_descriptor_,
      CardSubmit::default_instance_,
      CardSubmit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSubmit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSubmit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CardSubmit));
  Winner_descriptor_ = file->message_type(7);
  static const int Winner_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Winner, playerindex_),
  };
  Winner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Winner_descriptor_,
      Winner::default_instance_,
      Winner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Winner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Winner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Winner));
  UserDie_descriptor_ = file->message_type(8);
  static const int UserDie_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDie, playerindex_),
  };
  UserDie_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserDie_descriptor_,
      UserDie::default_instance_,
      UserDie_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDie, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDie, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserDie));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SevenGamePacket_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitCardCount_descriptor_, &InitCardCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitCardCount_CardCount_descriptor_, &InitCardCount_CardCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerID_descriptor_, &PlayerID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MyCardInfo_descriptor_, &MyCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MyCardInfo_PlayerCard_descriptor_, &MyCardInfo_PlayerCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableUpdate_descriptor_, &TableUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableUpdate_AddCard_descriptor_, &TableUpdate_AddCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurrentTurn_descriptor_, &CurrentTurn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnPass_descriptor_, &TurnPass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CardSubmit_descriptor_, &CardSubmit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Winner_descriptor_, &Winner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserDie_descriptor_, &UserDie::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SevenGamePacket_2eproto() {
  delete InitCardCount::default_instance_;
  delete InitCardCount_reflection_;
  delete InitCardCount_CardCount::default_instance_;
  delete InitCardCount_CardCount_reflection_;
  delete PlayerID::default_instance_;
  delete PlayerID_reflection_;
  delete MyCardInfo::default_instance_;
  delete MyCardInfo_reflection_;
  delete MyCardInfo_PlayerCard::default_instance_;
  delete MyCardInfo_PlayerCard_reflection_;
  delete TableUpdate::default_instance_;
  delete TableUpdate_reflection_;
  delete TableUpdate_AddCard::default_instance_;
  delete TableUpdate_AddCard_reflection_;
  delete CurrentTurn::default_instance_;
  delete CurrentTurn_reflection_;
  delete TurnPass::default_instance_;
  delete TurnPass_reflection_;
  delete CardSubmit::default_instance_;
  delete CardSubmit_reflection_;
  delete Winner::default_instance_;
  delete Winner_reflection_;
  delete UserDie::default_instance_;
  delete UserDie_reflection_;
}

void protobuf_AddDesc_SevenGamePacket_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025SevenGamePacket.proto\022\017SevenGamePacket"
    "\"|\n\rInitCardCount\0226\n\004info\030\004 \003(\0132(.SevenG"
    "amePacket.InitCardCount.CardCount\0323\n\tCar"
    "dCount\022\023\n\013PlayerIndex\030\001 \002(\005\022\021\n\tCardCount"
    "\030\002 \002(\005\"\037\n\010PlayerID\022\023\n\013PlayerIndex\030\001 \002(\005\""
    "s\n\nMyCardInfo\0224\n\004Card\030\r \003(\0132&.SevenGameP"
    "acket.MyCardInfo.PlayerCard\032/\n\nPlayerCar"
    "d\022\017\n\007CardNum\030\001 \002(\005\022\020\n\010CardType\030\002 \002(\005\"o\n\013"
    "TableUpdate\0222\n\004Card\0304 \003(\0132$.SevenGamePac"
    "ket.TableUpdate.AddCard\032,\n\007AddCard\022\017\n\007Ca"
    "rdNum\030\001 \002(\005\022\020\n\010CardType\030\002 \002(\005\"6\n\013Current"
    "Turn\022\023\n\013PlayerIndex\030\001 \002(\005\022\022\n\nPlayerName\030"
    "\002 \002(\t\"7\n\010TurnPass\022\023\n\013PlayerIndex\030\001 \002(\005\022\026"
    "\n\013TicketCount\030\002 \001(\005:\0010\"D\n\nCardSubmit\022\023\n\013"
    "PlayerIndex\030\001 \002(\005\022\017\n\007CardNum\030\002 \002(\005\022\020\n\010Ca"
    "rdType\030\003 \002(\005\"\035\n\006Winner\022\023\n\013PlayerIndex\030\001 "
    "\002(\005\"\036\n\007UserDie\022\023\n\013PlayerIndex\030\001 \002(\005", 675);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SevenGamePacket.proto", &protobuf_RegisterTypes);
  InitCardCount::default_instance_ = new InitCardCount();
  InitCardCount_CardCount::default_instance_ = new InitCardCount_CardCount();
  PlayerID::default_instance_ = new PlayerID();
  MyCardInfo::default_instance_ = new MyCardInfo();
  MyCardInfo_PlayerCard::default_instance_ = new MyCardInfo_PlayerCard();
  TableUpdate::default_instance_ = new TableUpdate();
  TableUpdate_AddCard::default_instance_ = new TableUpdate_AddCard();
  CurrentTurn::default_instance_ = new CurrentTurn();
  TurnPass::default_instance_ = new TurnPass();
  CardSubmit::default_instance_ = new CardSubmit();
  Winner::default_instance_ = new Winner();
  UserDie::default_instance_ = new UserDie();
  InitCardCount::default_instance_->InitAsDefaultInstance();
  InitCardCount_CardCount::default_instance_->InitAsDefaultInstance();
  PlayerID::default_instance_->InitAsDefaultInstance();
  MyCardInfo::default_instance_->InitAsDefaultInstance();
  MyCardInfo_PlayerCard::default_instance_->InitAsDefaultInstance();
  TableUpdate::default_instance_->InitAsDefaultInstance();
  TableUpdate_AddCard::default_instance_->InitAsDefaultInstance();
  CurrentTurn::default_instance_->InitAsDefaultInstance();
  TurnPass::default_instance_->InitAsDefaultInstance();
  CardSubmit::default_instance_->InitAsDefaultInstance();
  Winner::default_instance_->InitAsDefaultInstance();
  UserDie::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SevenGamePacket_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SevenGamePacket_2eproto {
  StaticDescriptorInitializer_SevenGamePacket_2eproto() {
    protobuf_AddDesc_SevenGamePacket_2eproto();
  }
} static_descriptor_initializer_SevenGamePacket_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int InitCardCount_CardCount::kPlayerIndexFieldNumber;
const int InitCardCount_CardCount::kCardCountFieldNumber;
#endif  // !_MSC_VER

InitCardCount_CardCount::InitCardCount_CardCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitCardCount_CardCount::InitAsDefaultInstance() {
}

InitCardCount_CardCount::InitCardCount_CardCount(const InitCardCount_CardCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitCardCount_CardCount::SharedCtor() {
  _cached_size_ = 0;
  playerindex_ = 0;
  cardcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitCardCount_CardCount::~InitCardCount_CardCount() {
  SharedDtor();
}

void InitCardCount_CardCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InitCardCount_CardCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitCardCount_CardCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitCardCount_CardCount_descriptor_;
}

const InitCardCount_CardCount& InitCardCount_CardCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SevenGamePacket_2eproto();
  return *default_instance_;
}

InitCardCount_CardCount* InitCardCount_CardCount::default_instance_ = NULL;

InitCardCount_CardCount* InitCardCount_CardCount::New() const {
  return new InitCardCount_CardCount;
}

void InitCardCount_CardCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerindex_ = 0;
    cardcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitCardCount_CardCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PlayerIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerindex_)));
          set_has_playerindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CardCount;
        break;
      }

      // required int32 CardCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CardCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardcount_)));
          set_has_cardcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitCardCount_CardCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 PlayerIndex = 1;
  if (has_playerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerindex(), output);
  }

  // required int32 CardCount = 2;
  if (has_cardcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cardcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitCardCount_CardCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 PlayerIndex = 1;
  if (has_playerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerindex(), target);
  }

  // required int32 CardCount = 2;
  if (has_cardcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cardcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitCardCount_CardCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 PlayerIndex = 1;
    if (has_playerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerindex());
    }

    // required int32 CardCount = 2;
    if (has_cardcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitCardCount_CardCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitCardCount_CardCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitCardCount_CardCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitCardCount_CardCount::MergeFrom(const InitCardCount_CardCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerindex()) {
      set_playerindex(from.playerindex());
    }
    if (from.has_cardcount()) {
      set_cardcount(from.cardcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitCardCount_CardCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitCardCount_CardCount::CopyFrom(const InitCardCount_CardCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitCardCount_CardCount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InitCardCount_CardCount::Swap(InitCardCount_CardCount* other) {
  if (other != this) {
    std::swap(playerindex_, other->playerindex_);
    std::swap(cardcount_, other->cardcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitCardCount_CardCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitCardCount_CardCount_descriptor_;
  metadata.reflection = InitCardCount_CardCount_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int InitCardCount::kInfoFieldNumber;
#endif  // !_MSC_VER

InitCardCount::InitCardCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitCardCount::InitAsDefaultInstance() {
}

InitCardCount::InitCardCount(const InitCardCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitCardCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitCardCount::~InitCardCount() {
  SharedDtor();
}

void InitCardCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InitCardCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitCardCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitCardCount_descriptor_;
}

const InitCardCount& InitCardCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SevenGamePacket_2eproto();
  return *default_instance_;
}

InitCardCount* InitCardCount::default_instance_ = NULL;

InitCardCount* InitCardCount::New() const {
  return new InitCardCount;
}

void InitCardCount::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitCardCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SevenGamePacket.InitCardCount.CardCount info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitCardCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SevenGamePacket.InitCardCount.CardCount info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitCardCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SevenGamePacket.InitCardCount.CardCount info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitCardCount::ByteSize() const {
  int total_size = 0;

  // repeated .SevenGamePacket.InitCardCount.CardCount info = 4;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitCardCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitCardCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitCardCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitCardCount::MergeFrom(const InitCardCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitCardCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitCardCount::CopyFrom(const InitCardCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitCardCount::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void InitCardCount::Swap(InitCardCount* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitCardCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitCardCount_descriptor_;
  metadata.reflection = InitCardCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerID::kPlayerIndexFieldNumber;
#endif  // !_MSC_VER

PlayerID::PlayerID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerID::InitAsDefaultInstance() {
}

PlayerID::PlayerID(const PlayerID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerID::SharedCtor() {
  _cached_size_ = 0;
  playerindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerID::~PlayerID() {
  SharedDtor();
}

void PlayerID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerID_descriptor_;
}

const PlayerID& PlayerID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SevenGamePacket_2eproto();
  return *default_instance_;
}

PlayerID* PlayerID::default_instance_ = NULL;

PlayerID* PlayerID::New() const {
  return new PlayerID;
}

void PlayerID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PlayerIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerindex_)));
          set_has_playerindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 PlayerIndex = 1;
  if (has_playerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 PlayerIndex = 1;
  if (has_playerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 PlayerIndex = 1;
    if (has_playerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerID::MergeFrom(const PlayerID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerindex()) {
      set_playerindex(from.playerindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerID::CopyFrom(const PlayerID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerID::Swap(PlayerID* other) {
  if (other != this) {
    std::swap(playerindex_, other->playerindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerID_descriptor_;
  metadata.reflection = PlayerID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MyCardInfo_PlayerCard::kCardNumFieldNumber;
const int MyCardInfo_PlayerCard::kCardTypeFieldNumber;
#endif  // !_MSC_VER

MyCardInfo_PlayerCard::MyCardInfo_PlayerCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MyCardInfo_PlayerCard::InitAsDefaultInstance() {
}

MyCardInfo_PlayerCard::MyCardInfo_PlayerCard(const MyCardInfo_PlayerCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MyCardInfo_PlayerCard::SharedCtor() {
  _cached_size_ = 0;
  cardnum_ = 0;
  cardtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyCardInfo_PlayerCard::~MyCardInfo_PlayerCard() {
  SharedDtor();
}

void MyCardInfo_PlayerCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MyCardInfo_PlayerCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyCardInfo_PlayerCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyCardInfo_PlayerCard_descriptor_;
}

const MyCardInfo_PlayerCard& MyCardInfo_PlayerCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SevenGamePacket_2eproto();
  return *default_instance_;
}

MyCardInfo_PlayerCard* MyCardInfo_PlayerCard::default_instance_ = NULL;

MyCardInfo_PlayerCard* MyCardInfo_PlayerCard::New() const {
  return new MyCardInfo_PlayerCard;
}

void MyCardInfo_PlayerCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cardnum_ = 0;
    cardtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MyCardInfo_PlayerCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CardNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardnum_)));
          set_has_cardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CardType;
        break;
      }

      // required int32 CardType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
          set_has_cardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MyCardInfo_PlayerCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CardNum = 1;
  if (has_cardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cardnum(), output);
  }

  // required int32 CardType = 2;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cardtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MyCardInfo_PlayerCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CardNum = 1;
  if (has_cardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cardnum(), target);
  }

  // required int32 CardType = 2;
  if (has_cardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cardtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MyCardInfo_PlayerCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CardNum = 1;
    if (has_cardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardnum());
    }

    // required int32 CardType = 2;
    if (has_cardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyCardInfo_PlayerCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MyCardInfo_PlayerCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MyCardInfo_PlayerCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyCardInfo_PlayerCard::MergeFrom(const MyCardInfo_PlayerCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cardnum()) {
      set_cardnum(from.cardnum());
    }
    if (from.has_cardtype()) {
      set_cardtype(from.cardtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MyCardInfo_PlayerCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyCardInfo_PlayerCard::CopyFrom(const MyCardInfo_PlayerCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyCardInfo_PlayerCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MyCardInfo_PlayerCard::Swap(MyCardInfo_PlayerCard* other) {
  if (other != this) {
    std::swap(cardnum_, other->cardnum_);
    std::swap(cardtype_, other->cardtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MyCardInfo_PlayerCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyCardInfo_PlayerCard_descriptor_;
  metadata.reflection = MyCardInfo_PlayerCard_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MyCardInfo::kCardFieldNumber;
#endif  // !_MSC_VER

MyCardInfo::MyCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MyCardInfo::InitAsDefaultInstance() {
}

MyCardInfo::MyCardInfo(const MyCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MyCardInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyCardInfo::~MyCardInfo() {
  SharedDtor();
}

void MyCardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MyCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyCardInfo_descriptor_;
}

const MyCardInfo& MyCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SevenGamePacket_2eproto();
  return *default_instance_;
}

MyCardInfo* MyCardInfo::default_instance_ = NULL;

MyCardInfo* MyCardInfo::New() const {
  return new MyCardInfo;
}

void MyCardInfo::Clear() {
  card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MyCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SevenGamePacket.MyCardInfo.PlayerCard Card = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_Card;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MyCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SevenGamePacket.MyCardInfo.PlayerCard Card = 13;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MyCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SevenGamePacket.MyCardInfo.PlayerCard Card = 13;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MyCardInfo::ByteSize() const {
  int total_size = 0;

  // repeated .SevenGamePacket.MyCardInfo.PlayerCard Card = 13;
  total_size += 1 * this->card_size();
  for (int i = 0; i < this->card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MyCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MyCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyCardInfo::MergeFrom(const MyCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MyCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyCardInfo::CopyFrom(const MyCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyCardInfo::IsInitialized() const {

  for (int i = 0; i < card_size(); i++) {
    if (!this->card(i).IsInitialized()) return false;
  }
  return true;
}

void MyCardInfo::Swap(MyCardInfo* other) {
  if (other != this) {
    card_.Swap(&other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MyCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyCardInfo_descriptor_;
  metadata.reflection = MyCardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableUpdate_AddCard::kCardNumFieldNumber;
const int TableUpdate_AddCard::kCardTypeFieldNumber;
#endif  // !_MSC_VER

TableUpdate_AddCard::TableUpdate_AddCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableUpdate_AddCard::InitAsDefaultInstance() {
}

TableUpdate_AddCard::TableUpdate_AddCard(const TableUpdate_AddCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableUpdate_AddCard::SharedCtor() {
  _cached_size_ = 0;
  cardnum_ = 0;
  cardtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableUpdate_AddCard::~TableUpdate_AddCard() {
  SharedDtor();
}

void TableUpdate_AddCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TableUpdate_AddCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableUpdate_AddCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableUpdate_AddCard_descriptor_;
}

const TableUpdate_AddCard& TableUpdate_AddCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SevenGamePacket_2eproto();
  return *default_instance_;
}

TableUpdate_AddCard* TableUpdate_AddCard::default_instance_ = NULL;

TableUpdate_AddCard* TableUpdate_AddCard::New() const {
  return new TableUpdate_AddCard;
}

void TableUpdate_AddCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cardnum_ = 0;
    cardtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableUpdate_AddCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CardNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardnum_)));
          set_has_cardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CardType;
        break;
      }

      // required int32 CardType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
          set_has_cardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableUpdate_AddCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CardNum = 1;
  if (has_cardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cardnum(), output);
  }

  // required int32 CardType = 2;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cardtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableUpdate_AddCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CardNum = 1;
  if (has_cardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cardnum(), target);
  }

  // required int32 CardType = 2;
  if (has_cardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cardtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableUpdate_AddCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CardNum = 1;
    if (has_cardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardnum());
    }

    // required int32 CardType = 2;
    if (has_cardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableUpdate_AddCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableUpdate_AddCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableUpdate_AddCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableUpdate_AddCard::MergeFrom(const TableUpdate_AddCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cardnum()) {
      set_cardnum(from.cardnum());
    }
    if (from.has_cardtype()) {
      set_cardtype(from.cardtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableUpdate_AddCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableUpdate_AddCard::CopyFrom(const TableUpdate_AddCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableUpdate_AddCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TableUpdate_AddCard::Swap(TableUpdate_AddCard* other) {
  if (other != this) {
    std::swap(cardnum_, other->cardnum_);
    std::swap(cardtype_, other->cardtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableUpdate_AddCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableUpdate_AddCard_descriptor_;
  metadata.reflection = TableUpdate_AddCard_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TableUpdate::kCardFieldNumber;
#endif  // !_MSC_VER

TableUpdate::TableUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableUpdate::InitAsDefaultInstance() {
}

TableUpdate::TableUpdate(const TableUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableUpdate::~TableUpdate() {
  SharedDtor();
}

void TableUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TableUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableUpdate_descriptor_;
}

const TableUpdate& TableUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SevenGamePacket_2eproto();
  return *default_instance_;
}

TableUpdate* TableUpdate::default_instance_ = NULL;

TableUpdate* TableUpdate::New() const {
  return new TableUpdate;
}

void TableUpdate::Clear() {
  card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SevenGamePacket.TableUpdate.AddCard Card = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_Card;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SevenGamePacket.TableUpdate.AddCard Card = 52;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SevenGamePacket.TableUpdate.AddCard Card = 52;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableUpdate::ByteSize() const {
  int total_size = 0;

  // repeated .SevenGamePacket.TableUpdate.AddCard Card = 52;
  total_size += 2 * this->card_size();
  for (int i = 0; i < this->card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableUpdate::MergeFrom(const TableUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableUpdate::CopyFrom(const TableUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableUpdate::IsInitialized() const {

  for (int i = 0; i < card_size(); i++) {
    if (!this->card(i).IsInitialized()) return false;
  }
  return true;
}

void TableUpdate::Swap(TableUpdate* other) {
  if (other != this) {
    card_.Swap(&other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableUpdate_descriptor_;
  metadata.reflection = TableUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurrentTurn::kPlayerIndexFieldNumber;
const int CurrentTurn::kPlayerNameFieldNumber;
#endif  // !_MSC_VER

CurrentTurn::CurrentTurn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CurrentTurn::InitAsDefaultInstance() {
}

CurrentTurn::CurrentTurn(const CurrentTurn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CurrentTurn::SharedCtor() {
  _cached_size_ = 0;
  playerindex_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrentTurn::~CurrentTurn() {
  SharedDtor();
}

void CurrentTurn::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void CurrentTurn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrentTurn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrentTurn_descriptor_;
}

const CurrentTurn& CurrentTurn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SevenGamePacket_2eproto();
  return *default_instance_;
}

CurrentTurn* CurrentTurn::default_instance_ = NULL;

CurrentTurn* CurrentTurn::New() const {
  return new CurrentTurn;
}

void CurrentTurn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerindex_ = 0;
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurrentTurn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PlayerIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerindex_)));
          set_has_playerindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PlayerName;
        break;
      }

      // required string PlayerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CurrentTurn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 PlayerIndex = 1;
  if (has_playerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerindex(), output);
  }

  // required string PlayerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CurrentTurn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 PlayerIndex = 1;
  if (has_playerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerindex(), target);
  }

  // required string PlayerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CurrentTurn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 PlayerIndex = 1;
    if (has_playerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerindex());
    }

    // required string PlayerName = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrentTurn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurrentTurn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurrentTurn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurrentTurn::MergeFrom(const CurrentTurn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerindex()) {
      set_playerindex(from.playerindex());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurrentTurn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentTurn::CopyFrom(const CurrentTurn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentTurn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CurrentTurn::Swap(CurrentTurn* other) {
  if (other != this) {
    std::swap(playerindex_, other->playerindex_);
    std::swap(playername_, other->playername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurrentTurn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrentTurn_descriptor_;
  metadata.reflection = CurrentTurn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnPass::kPlayerIndexFieldNumber;
const int TurnPass::kTicketCountFieldNumber;
#endif  // !_MSC_VER

TurnPass::TurnPass()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnPass::InitAsDefaultInstance() {
}

TurnPass::TurnPass(const TurnPass& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnPass::SharedCtor() {
  _cached_size_ = 0;
  playerindex_ = 0;
  ticketcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnPass::~TurnPass() {
  SharedDtor();
}

void TurnPass::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnPass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnPass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnPass_descriptor_;
}

const TurnPass& TurnPass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SevenGamePacket_2eproto();
  return *default_instance_;
}

TurnPass* TurnPass::default_instance_ = NULL;

TurnPass* TurnPass::New() const {
  return new TurnPass;
}

void TurnPass::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerindex_ = 0;
    ticketcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnPass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PlayerIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerindex_)));
          set_has_playerindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TicketCount;
        break;
      }

      // optional int32 TicketCount = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TicketCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticketcount_)));
          set_has_ticketcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnPass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 PlayerIndex = 1;
  if (has_playerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerindex(), output);
  }

  // optional int32 TicketCount = 2 [default = 0];
  if (has_ticketcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ticketcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnPass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 PlayerIndex = 1;
  if (has_playerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerindex(), target);
  }

  // optional int32 TicketCount = 2 [default = 0];
  if (has_ticketcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ticketcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnPass::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 PlayerIndex = 1;
    if (has_playerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerindex());
    }

    // optional int32 TicketCount = 2 [default = 0];
    if (has_ticketcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ticketcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnPass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnPass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnPass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnPass::MergeFrom(const TurnPass& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerindex()) {
      set_playerindex(from.playerindex());
    }
    if (from.has_ticketcount()) {
      set_ticketcount(from.ticketcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnPass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnPass::CopyFrom(const TurnPass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnPass::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TurnPass::Swap(TurnPass* other) {
  if (other != this) {
    std::swap(playerindex_, other->playerindex_);
    std::swap(ticketcount_, other->ticketcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnPass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnPass_descriptor_;
  metadata.reflection = TurnPass_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CardSubmit::kPlayerIndexFieldNumber;
const int CardSubmit::kCardNumFieldNumber;
const int CardSubmit::kCardTypeFieldNumber;
#endif  // !_MSC_VER

CardSubmit::CardSubmit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CardSubmit::InitAsDefaultInstance() {
}

CardSubmit::CardSubmit(const CardSubmit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CardSubmit::SharedCtor() {
  _cached_size_ = 0;
  playerindex_ = 0;
  cardnum_ = 0;
  cardtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardSubmit::~CardSubmit() {
  SharedDtor();
}

void CardSubmit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CardSubmit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardSubmit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardSubmit_descriptor_;
}

const CardSubmit& CardSubmit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SevenGamePacket_2eproto();
  return *default_instance_;
}

CardSubmit* CardSubmit::default_instance_ = NULL;

CardSubmit* CardSubmit::New() const {
  return new CardSubmit;
}

void CardSubmit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerindex_ = 0;
    cardnum_ = 0;
    cardtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CardSubmit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PlayerIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerindex_)));
          set_has_playerindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CardNum;
        break;
      }

      // required int32 CardNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardnum_)));
          set_has_cardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CardType;
        break;
      }

      // required int32 CardType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
          set_has_cardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CardSubmit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 PlayerIndex = 1;
  if (has_playerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerindex(), output);
  }

  // required int32 CardNum = 2;
  if (has_cardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cardnum(), output);
  }

  // required int32 CardType = 3;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cardtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CardSubmit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 PlayerIndex = 1;
  if (has_playerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerindex(), target);
  }

  // required int32 CardNum = 2;
  if (has_cardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cardnum(), target);
  }

  // required int32 CardType = 3;
  if (has_cardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cardtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CardSubmit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 PlayerIndex = 1;
    if (has_playerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerindex());
    }

    // required int32 CardNum = 2;
    if (has_cardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardnum());
    }

    // required int32 CardType = 3;
    if (has_cardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardSubmit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CardSubmit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CardSubmit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CardSubmit::MergeFrom(const CardSubmit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerindex()) {
      set_playerindex(from.playerindex());
    }
    if (from.has_cardnum()) {
      set_cardnum(from.cardnum());
    }
    if (from.has_cardtype()) {
      set_cardtype(from.cardtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CardSubmit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardSubmit::CopyFrom(const CardSubmit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardSubmit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CardSubmit::Swap(CardSubmit* other) {
  if (other != this) {
    std::swap(playerindex_, other->playerindex_);
    std::swap(cardnum_, other->cardnum_);
    std::swap(cardtype_, other->cardtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CardSubmit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardSubmit_descriptor_;
  metadata.reflection = CardSubmit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Winner::kPlayerIndexFieldNumber;
#endif  // !_MSC_VER

Winner::Winner()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Winner::InitAsDefaultInstance() {
}

Winner::Winner(const Winner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Winner::SharedCtor() {
  _cached_size_ = 0;
  playerindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Winner::~Winner() {
  SharedDtor();
}

void Winner::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Winner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Winner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Winner_descriptor_;
}

const Winner& Winner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SevenGamePacket_2eproto();
  return *default_instance_;
}

Winner* Winner::default_instance_ = NULL;

Winner* Winner::New() const {
  return new Winner;
}

void Winner::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Winner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PlayerIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerindex_)));
          set_has_playerindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Winner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 PlayerIndex = 1;
  if (has_playerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Winner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 PlayerIndex = 1;
  if (has_playerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Winner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 PlayerIndex = 1;
    if (has_playerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Winner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Winner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Winner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Winner::MergeFrom(const Winner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerindex()) {
      set_playerindex(from.playerindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Winner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Winner::CopyFrom(const Winner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Winner::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Winner::Swap(Winner* other) {
  if (other != this) {
    std::swap(playerindex_, other->playerindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Winner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Winner_descriptor_;
  metadata.reflection = Winner_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserDie::kPlayerIndexFieldNumber;
#endif  // !_MSC_VER

UserDie::UserDie()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserDie::InitAsDefaultInstance() {
}

UserDie::UserDie(const UserDie& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserDie::SharedCtor() {
  _cached_size_ = 0;
  playerindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDie::~UserDie() {
  SharedDtor();
}

void UserDie::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserDie::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserDie::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDie_descriptor_;
}

const UserDie& UserDie::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SevenGamePacket_2eproto();
  return *default_instance_;
}

UserDie* UserDie::default_instance_ = NULL;

UserDie* UserDie::New() const {
  return new UserDie;
}

void UserDie::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserDie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PlayerIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerindex_)));
          set_has_playerindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserDie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 PlayerIndex = 1;
  if (has_playerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserDie::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 PlayerIndex = 1;
  if (has_playerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserDie::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 PlayerIndex = 1;
    if (has_playerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDie::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserDie* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserDie*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserDie::MergeFrom(const UserDie& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerindex()) {
      set_playerindex(from.playerindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserDie::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDie::CopyFrom(const UserDie& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDie::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserDie::Swap(UserDie* other) {
  if (other != this) {
    std::swap(playerindex_, other->playerindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserDie::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserDie_descriptor_;
  metadata.reflection = UserDie_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SevenGamePacket

// @@protoc_insertion_point(global_scope)
