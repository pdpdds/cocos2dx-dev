// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SevenGamePacket.proto

#ifndef PROTOBUF_SevenGamePacket_2eproto__INCLUDED
#define PROTOBUF_SevenGamePacket_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SevenGamePacket {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SevenGamePacket_2eproto();
void protobuf_AssignDesc_SevenGamePacket_2eproto();
void protobuf_ShutdownFile_SevenGamePacket_2eproto();

class InitCardCount;
class InitCardCount_CardCount;
class PlayerID;
class MyCardInfo;
class MyCardInfo_PlayerCard;
class TableUpdate;
class TableUpdate_AddCard;
class CurrentTurn;
class TurnPass;
class CardSubmit;
class Winner;
class UserDie;

// ===================================================================

class InitCardCount_CardCount : public ::google::protobuf::Message {
 public:
  InitCardCount_CardCount();
  virtual ~InitCardCount_CardCount();

  InitCardCount_CardCount(const InitCardCount_CardCount& from);

  inline InitCardCount_CardCount& operator=(const InitCardCount_CardCount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitCardCount_CardCount& default_instance();

  void Swap(InitCardCount_CardCount* other);

  // implements Message ----------------------------------------------

  InitCardCount_CardCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitCardCount_CardCount& from);
  void MergeFrom(const InitCardCount_CardCount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 PlayerIndex = 1;
  inline bool has_playerindex() const;
  inline void clear_playerindex();
  static const int kPlayerIndexFieldNumber = 1;
  inline ::google::protobuf::int32 playerindex() const;
  inline void set_playerindex(::google::protobuf::int32 value);

  // required int32 CardCount = 2;
  inline bool has_cardcount() const;
  inline void clear_cardcount();
  static const int kCardCountFieldNumber = 2;
  inline ::google::protobuf::int32 cardcount() const;
  inline void set_cardcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SevenGamePacket.InitCardCount.CardCount)
 private:
  inline void set_has_playerindex();
  inline void clear_has_playerindex();
  inline void set_has_cardcount();
  inline void clear_has_cardcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 playerindex_;
  ::google::protobuf::int32 cardcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SevenGamePacket_2eproto();
  friend void protobuf_AssignDesc_SevenGamePacket_2eproto();
  friend void protobuf_ShutdownFile_SevenGamePacket_2eproto();

  void InitAsDefaultInstance();
  static InitCardCount_CardCount* default_instance_;
};
// -------------------------------------------------------------------

class InitCardCount : public ::google::protobuf::Message {
 public:
  InitCardCount();
  virtual ~InitCardCount();

  InitCardCount(const InitCardCount& from);

  inline InitCardCount& operator=(const InitCardCount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitCardCount& default_instance();

  void Swap(InitCardCount* other);

  // implements Message ----------------------------------------------

  InitCardCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitCardCount& from);
  void MergeFrom(const InitCardCount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef InitCardCount_CardCount CardCount;

  // accessors -------------------------------------------------------

  // repeated .SevenGamePacket.InitCardCount.CardCount info = 4;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::SevenGamePacket::InitCardCount_CardCount& info(int index) const;
  inline ::SevenGamePacket::InitCardCount_CardCount* mutable_info(int index);
  inline ::SevenGamePacket::InitCardCount_CardCount* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::SevenGamePacket::InitCardCount_CardCount >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::SevenGamePacket::InitCardCount_CardCount >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:SevenGamePacket.InitCardCount)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SevenGamePacket::InitCardCount_CardCount > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SevenGamePacket_2eproto();
  friend void protobuf_AssignDesc_SevenGamePacket_2eproto();
  friend void protobuf_ShutdownFile_SevenGamePacket_2eproto();

  void InitAsDefaultInstance();
  static InitCardCount* default_instance_;
};
// -------------------------------------------------------------------

class PlayerID : public ::google::protobuf::Message {
 public:
  PlayerID();
  virtual ~PlayerID();

  PlayerID(const PlayerID& from);

  inline PlayerID& operator=(const PlayerID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerID& default_instance();

  void Swap(PlayerID* other);

  // implements Message ----------------------------------------------

  PlayerID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerID& from);
  void MergeFrom(const PlayerID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 PlayerIndex = 1;
  inline bool has_playerindex() const;
  inline void clear_playerindex();
  static const int kPlayerIndexFieldNumber = 1;
  inline ::google::protobuf::int32 playerindex() const;
  inline void set_playerindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SevenGamePacket.PlayerID)
 private:
  inline void set_has_playerindex();
  inline void clear_has_playerindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 playerindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SevenGamePacket_2eproto();
  friend void protobuf_AssignDesc_SevenGamePacket_2eproto();
  friend void protobuf_ShutdownFile_SevenGamePacket_2eproto();

  void InitAsDefaultInstance();
  static PlayerID* default_instance_;
};
// -------------------------------------------------------------------

class MyCardInfo_PlayerCard : public ::google::protobuf::Message {
 public:
  MyCardInfo_PlayerCard();
  virtual ~MyCardInfo_PlayerCard();

  MyCardInfo_PlayerCard(const MyCardInfo_PlayerCard& from);

  inline MyCardInfo_PlayerCard& operator=(const MyCardInfo_PlayerCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyCardInfo_PlayerCard& default_instance();

  void Swap(MyCardInfo_PlayerCard* other);

  // implements Message ----------------------------------------------

  MyCardInfo_PlayerCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyCardInfo_PlayerCard& from);
  void MergeFrom(const MyCardInfo_PlayerCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CardNum = 1;
  inline bool has_cardnum() const;
  inline void clear_cardnum();
  static const int kCardNumFieldNumber = 1;
  inline ::google::protobuf::int32 cardnum() const;
  inline void set_cardnum(::google::protobuf::int32 value);

  // required int32 CardType = 2;
  inline bool has_cardtype() const;
  inline void clear_cardtype();
  static const int kCardTypeFieldNumber = 2;
  inline ::google::protobuf::int32 cardtype() const;
  inline void set_cardtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SevenGamePacket.MyCardInfo.PlayerCard)
 private:
  inline void set_has_cardnum();
  inline void clear_has_cardnum();
  inline void set_has_cardtype();
  inline void clear_has_cardtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cardnum_;
  ::google::protobuf::int32 cardtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SevenGamePacket_2eproto();
  friend void protobuf_AssignDesc_SevenGamePacket_2eproto();
  friend void protobuf_ShutdownFile_SevenGamePacket_2eproto();

  void InitAsDefaultInstance();
  static MyCardInfo_PlayerCard* default_instance_;
};
// -------------------------------------------------------------------

class MyCardInfo : public ::google::protobuf::Message {
 public:
  MyCardInfo();
  virtual ~MyCardInfo();

  MyCardInfo(const MyCardInfo& from);

  inline MyCardInfo& operator=(const MyCardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyCardInfo& default_instance();

  void Swap(MyCardInfo* other);

  // implements Message ----------------------------------------------

  MyCardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyCardInfo& from);
  void MergeFrom(const MyCardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MyCardInfo_PlayerCard PlayerCard;

  // accessors -------------------------------------------------------

  // repeated .SevenGamePacket.MyCardInfo.PlayerCard Card = 13;
  inline int card_size() const;
  inline void clear_card();
  static const int kCardFieldNumber = 13;
  inline const ::SevenGamePacket::MyCardInfo_PlayerCard& card(int index) const;
  inline ::SevenGamePacket::MyCardInfo_PlayerCard* mutable_card(int index);
  inline ::SevenGamePacket::MyCardInfo_PlayerCard* add_card();
  inline const ::google::protobuf::RepeatedPtrField< ::SevenGamePacket::MyCardInfo_PlayerCard >&
      card() const;
  inline ::google::protobuf::RepeatedPtrField< ::SevenGamePacket::MyCardInfo_PlayerCard >*
      mutable_card();

  // @@protoc_insertion_point(class_scope:SevenGamePacket.MyCardInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SevenGamePacket::MyCardInfo_PlayerCard > card_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SevenGamePacket_2eproto();
  friend void protobuf_AssignDesc_SevenGamePacket_2eproto();
  friend void protobuf_ShutdownFile_SevenGamePacket_2eproto();

  void InitAsDefaultInstance();
  static MyCardInfo* default_instance_;
};
// -------------------------------------------------------------------

class TableUpdate_AddCard : public ::google::protobuf::Message {
 public:
  TableUpdate_AddCard();
  virtual ~TableUpdate_AddCard();

  TableUpdate_AddCard(const TableUpdate_AddCard& from);

  inline TableUpdate_AddCard& operator=(const TableUpdate_AddCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableUpdate_AddCard& default_instance();

  void Swap(TableUpdate_AddCard* other);

  // implements Message ----------------------------------------------

  TableUpdate_AddCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableUpdate_AddCard& from);
  void MergeFrom(const TableUpdate_AddCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CardNum = 1;
  inline bool has_cardnum() const;
  inline void clear_cardnum();
  static const int kCardNumFieldNumber = 1;
  inline ::google::protobuf::int32 cardnum() const;
  inline void set_cardnum(::google::protobuf::int32 value);

  // required int32 CardType = 2;
  inline bool has_cardtype() const;
  inline void clear_cardtype();
  static const int kCardTypeFieldNumber = 2;
  inline ::google::protobuf::int32 cardtype() const;
  inline void set_cardtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SevenGamePacket.TableUpdate.AddCard)
 private:
  inline void set_has_cardnum();
  inline void clear_has_cardnum();
  inline void set_has_cardtype();
  inline void clear_has_cardtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cardnum_;
  ::google::protobuf::int32 cardtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SevenGamePacket_2eproto();
  friend void protobuf_AssignDesc_SevenGamePacket_2eproto();
  friend void protobuf_ShutdownFile_SevenGamePacket_2eproto();

  void InitAsDefaultInstance();
  static TableUpdate_AddCard* default_instance_;
};
// -------------------------------------------------------------------

class TableUpdate : public ::google::protobuf::Message {
 public:
  TableUpdate();
  virtual ~TableUpdate();

  TableUpdate(const TableUpdate& from);

  inline TableUpdate& operator=(const TableUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableUpdate& default_instance();

  void Swap(TableUpdate* other);

  // implements Message ----------------------------------------------

  TableUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableUpdate& from);
  void MergeFrom(const TableUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TableUpdate_AddCard AddCard;

  // accessors -------------------------------------------------------

  // repeated .SevenGamePacket.TableUpdate.AddCard Card = 52;
  inline int card_size() const;
  inline void clear_card();
  static const int kCardFieldNumber = 52;
  inline const ::SevenGamePacket::TableUpdate_AddCard& card(int index) const;
  inline ::SevenGamePacket::TableUpdate_AddCard* mutable_card(int index);
  inline ::SevenGamePacket::TableUpdate_AddCard* add_card();
  inline const ::google::protobuf::RepeatedPtrField< ::SevenGamePacket::TableUpdate_AddCard >&
      card() const;
  inline ::google::protobuf::RepeatedPtrField< ::SevenGamePacket::TableUpdate_AddCard >*
      mutable_card();

  // @@protoc_insertion_point(class_scope:SevenGamePacket.TableUpdate)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SevenGamePacket::TableUpdate_AddCard > card_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SevenGamePacket_2eproto();
  friend void protobuf_AssignDesc_SevenGamePacket_2eproto();
  friend void protobuf_ShutdownFile_SevenGamePacket_2eproto();

  void InitAsDefaultInstance();
  static TableUpdate* default_instance_;
};
// -------------------------------------------------------------------

class CurrentTurn : public ::google::protobuf::Message {
 public:
  CurrentTurn();
  virtual ~CurrentTurn();

  CurrentTurn(const CurrentTurn& from);

  inline CurrentTurn& operator=(const CurrentTurn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CurrentTurn& default_instance();

  void Swap(CurrentTurn* other);

  // implements Message ----------------------------------------------

  CurrentTurn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CurrentTurn& from);
  void MergeFrom(const CurrentTurn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 PlayerIndex = 1;
  inline bool has_playerindex() const;
  inline void clear_playerindex();
  static const int kPlayerIndexFieldNumber = 1;
  inline ::google::protobuf::int32 playerindex() const;
  inline void set_playerindex(::google::protobuf::int32 value);

  // required string PlayerName = 2;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // @@protoc_insertion_point(class_scope:SevenGamePacket.CurrentTurn)
 private:
  inline void set_has_playerindex();
  inline void clear_has_playerindex();
  inline void set_has_playername();
  inline void clear_has_playername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* playername_;
  ::google::protobuf::int32 playerindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SevenGamePacket_2eproto();
  friend void protobuf_AssignDesc_SevenGamePacket_2eproto();
  friend void protobuf_ShutdownFile_SevenGamePacket_2eproto();

  void InitAsDefaultInstance();
  static CurrentTurn* default_instance_;
};
// -------------------------------------------------------------------

class TurnPass : public ::google::protobuf::Message {
 public:
  TurnPass();
  virtual ~TurnPass();

  TurnPass(const TurnPass& from);

  inline TurnPass& operator=(const TurnPass& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TurnPass& default_instance();

  void Swap(TurnPass* other);

  // implements Message ----------------------------------------------

  TurnPass* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TurnPass& from);
  void MergeFrom(const TurnPass& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 PlayerIndex = 1;
  inline bool has_playerindex() const;
  inline void clear_playerindex();
  static const int kPlayerIndexFieldNumber = 1;
  inline ::google::protobuf::int32 playerindex() const;
  inline void set_playerindex(::google::protobuf::int32 value);

  // optional int32 TicketCount = 2 [default = 0];
  inline bool has_ticketcount() const;
  inline void clear_ticketcount();
  static const int kTicketCountFieldNumber = 2;
  inline ::google::protobuf::int32 ticketcount() const;
  inline void set_ticketcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SevenGamePacket.TurnPass)
 private:
  inline void set_has_playerindex();
  inline void clear_has_playerindex();
  inline void set_has_ticketcount();
  inline void clear_has_ticketcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 playerindex_;
  ::google::protobuf::int32 ticketcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SevenGamePacket_2eproto();
  friend void protobuf_AssignDesc_SevenGamePacket_2eproto();
  friend void protobuf_ShutdownFile_SevenGamePacket_2eproto();

  void InitAsDefaultInstance();
  static TurnPass* default_instance_;
};
// -------------------------------------------------------------------

class CardSubmit : public ::google::protobuf::Message {
 public:
  CardSubmit();
  virtual ~CardSubmit();

  CardSubmit(const CardSubmit& from);

  inline CardSubmit& operator=(const CardSubmit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CardSubmit& default_instance();

  void Swap(CardSubmit* other);

  // implements Message ----------------------------------------------

  CardSubmit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CardSubmit& from);
  void MergeFrom(const CardSubmit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 PlayerIndex = 1;
  inline bool has_playerindex() const;
  inline void clear_playerindex();
  static const int kPlayerIndexFieldNumber = 1;
  inline ::google::protobuf::int32 playerindex() const;
  inline void set_playerindex(::google::protobuf::int32 value);

  // required int32 CardNum = 2;
  inline bool has_cardnum() const;
  inline void clear_cardnum();
  static const int kCardNumFieldNumber = 2;
  inline ::google::protobuf::int32 cardnum() const;
  inline void set_cardnum(::google::protobuf::int32 value);

  // required int32 CardType = 3;
  inline bool has_cardtype() const;
  inline void clear_cardtype();
  static const int kCardTypeFieldNumber = 3;
  inline ::google::protobuf::int32 cardtype() const;
  inline void set_cardtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SevenGamePacket.CardSubmit)
 private:
  inline void set_has_playerindex();
  inline void clear_has_playerindex();
  inline void set_has_cardnum();
  inline void clear_has_cardnum();
  inline void set_has_cardtype();
  inline void clear_has_cardtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 playerindex_;
  ::google::protobuf::int32 cardnum_;
  ::google::protobuf::int32 cardtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SevenGamePacket_2eproto();
  friend void protobuf_AssignDesc_SevenGamePacket_2eproto();
  friend void protobuf_ShutdownFile_SevenGamePacket_2eproto();

  void InitAsDefaultInstance();
  static CardSubmit* default_instance_;
};
// -------------------------------------------------------------------

class Winner : public ::google::protobuf::Message {
 public:
  Winner();
  virtual ~Winner();

  Winner(const Winner& from);

  inline Winner& operator=(const Winner& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Winner& default_instance();

  void Swap(Winner* other);

  // implements Message ----------------------------------------------

  Winner* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Winner& from);
  void MergeFrom(const Winner& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 PlayerIndex = 1;
  inline bool has_playerindex() const;
  inline void clear_playerindex();
  static const int kPlayerIndexFieldNumber = 1;
  inline ::google::protobuf::int32 playerindex() const;
  inline void set_playerindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SevenGamePacket.Winner)
 private:
  inline void set_has_playerindex();
  inline void clear_has_playerindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 playerindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SevenGamePacket_2eproto();
  friend void protobuf_AssignDesc_SevenGamePacket_2eproto();
  friend void protobuf_ShutdownFile_SevenGamePacket_2eproto();

  void InitAsDefaultInstance();
  static Winner* default_instance_;
};
// -------------------------------------------------------------------

class UserDie : public ::google::protobuf::Message {
 public:
  UserDie();
  virtual ~UserDie();

  UserDie(const UserDie& from);

  inline UserDie& operator=(const UserDie& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserDie& default_instance();

  void Swap(UserDie* other);

  // implements Message ----------------------------------------------

  UserDie* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserDie& from);
  void MergeFrom(const UserDie& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 PlayerIndex = 1;
  inline bool has_playerindex() const;
  inline void clear_playerindex();
  static const int kPlayerIndexFieldNumber = 1;
  inline ::google::protobuf::int32 playerindex() const;
  inline void set_playerindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SevenGamePacket.UserDie)
 private:
  inline void set_has_playerindex();
  inline void clear_has_playerindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 playerindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SevenGamePacket_2eproto();
  friend void protobuf_AssignDesc_SevenGamePacket_2eproto();
  friend void protobuf_ShutdownFile_SevenGamePacket_2eproto();

  void InitAsDefaultInstance();
  static UserDie* default_instance_;
};
// ===================================================================


// ===================================================================

// InitCardCount_CardCount

// required int32 PlayerIndex = 1;
inline bool InitCardCount_CardCount::has_playerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InitCardCount_CardCount::set_has_playerindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InitCardCount_CardCount::clear_has_playerindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InitCardCount_CardCount::clear_playerindex() {
  playerindex_ = 0;
  clear_has_playerindex();
}
inline ::google::protobuf::int32 InitCardCount_CardCount::playerindex() const {
  return playerindex_;
}
inline void InitCardCount_CardCount::set_playerindex(::google::protobuf::int32 value) {
  set_has_playerindex();
  playerindex_ = value;
}

// required int32 CardCount = 2;
inline bool InitCardCount_CardCount::has_cardcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InitCardCount_CardCount::set_has_cardcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InitCardCount_CardCount::clear_has_cardcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InitCardCount_CardCount::clear_cardcount() {
  cardcount_ = 0;
  clear_has_cardcount();
}
inline ::google::protobuf::int32 InitCardCount_CardCount::cardcount() const {
  return cardcount_;
}
inline void InitCardCount_CardCount::set_cardcount(::google::protobuf::int32 value) {
  set_has_cardcount();
  cardcount_ = value;
}

// -------------------------------------------------------------------

// InitCardCount

// repeated .SevenGamePacket.InitCardCount.CardCount info = 4;
inline int InitCardCount::info_size() const {
  return info_.size();
}
inline void InitCardCount::clear_info() {
  info_.Clear();
}
inline const ::SevenGamePacket::InitCardCount_CardCount& InitCardCount::info(int index) const {
  return info_.Get(index);
}
inline ::SevenGamePacket::InitCardCount_CardCount* InitCardCount::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::SevenGamePacket::InitCardCount_CardCount* InitCardCount::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SevenGamePacket::InitCardCount_CardCount >&
InitCardCount::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::SevenGamePacket::InitCardCount_CardCount >*
InitCardCount::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// PlayerID

// required int32 PlayerIndex = 1;
inline bool PlayerID::has_playerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerID::set_has_playerindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerID::clear_has_playerindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerID::clear_playerindex() {
  playerindex_ = 0;
  clear_has_playerindex();
}
inline ::google::protobuf::int32 PlayerID::playerindex() const {
  return playerindex_;
}
inline void PlayerID::set_playerindex(::google::protobuf::int32 value) {
  set_has_playerindex();
  playerindex_ = value;
}

// -------------------------------------------------------------------

// MyCardInfo_PlayerCard

// required int32 CardNum = 1;
inline bool MyCardInfo_PlayerCard::has_cardnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MyCardInfo_PlayerCard::set_has_cardnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MyCardInfo_PlayerCard::clear_has_cardnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MyCardInfo_PlayerCard::clear_cardnum() {
  cardnum_ = 0;
  clear_has_cardnum();
}
inline ::google::protobuf::int32 MyCardInfo_PlayerCard::cardnum() const {
  return cardnum_;
}
inline void MyCardInfo_PlayerCard::set_cardnum(::google::protobuf::int32 value) {
  set_has_cardnum();
  cardnum_ = value;
}

// required int32 CardType = 2;
inline bool MyCardInfo_PlayerCard::has_cardtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MyCardInfo_PlayerCard::set_has_cardtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MyCardInfo_PlayerCard::clear_has_cardtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MyCardInfo_PlayerCard::clear_cardtype() {
  cardtype_ = 0;
  clear_has_cardtype();
}
inline ::google::protobuf::int32 MyCardInfo_PlayerCard::cardtype() const {
  return cardtype_;
}
inline void MyCardInfo_PlayerCard::set_cardtype(::google::protobuf::int32 value) {
  set_has_cardtype();
  cardtype_ = value;
}

// -------------------------------------------------------------------

// MyCardInfo

// repeated .SevenGamePacket.MyCardInfo.PlayerCard Card = 13;
inline int MyCardInfo::card_size() const {
  return card_.size();
}
inline void MyCardInfo::clear_card() {
  card_.Clear();
}
inline const ::SevenGamePacket::MyCardInfo_PlayerCard& MyCardInfo::card(int index) const {
  return card_.Get(index);
}
inline ::SevenGamePacket::MyCardInfo_PlayerCard* MyCardInfo::mutable_card(int index) {
  return card_.Mutable(index);
}
inline ::SevenGamePacket::MyCardInfo_PlayerCard* MyCardInfo::add_card() {
  return card_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SevenGamePacket::MyCardInfo_PlayerCard >&
MyCardInfo::card() const {
  return card_;
}
inline ::google::protobuf::RepeatedPtrField< ::SevenGamePacket::MyCardInfo_PlayerCard >*
MyCardInfo::mutable_card() {
  return &card_;
}

// -------------------------------------------------------------------

// TableUpdate_AddCard

// required int32 CardNum = 1;
inline bool TableUpdate_AddCard::has_cardnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableUpdate_AddCard::set_has_cardnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableUpdate_AddCard::clear_has_cardnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableUpdate_AddCard::clear_cardnum() {
  cardnum_ = 0;
  clear_has_cardnum();
}
inline ::google::protobuf::int32 TableUpdate_AddCard::cardnum() const {
  return cardnum_;
}
inline void TableUpdate_AddCard::set_cardnum(::google::protobuf::int32 value) {
  set_has_cardnum();
  cardnum_ = value;
}

// required int32 CardType = 2;
inline bool TableUpdate_AddCard::has_cardtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableUpdate_AddCard::set_has_cardtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableUpdate_AddCard::clear_has_cardtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableUpdate_AddCard::clear_cardtype() {
  cardtype_ = 0;
  clear_has_cardtype();
}
inline ::google::protobuf::int32 TableUpdate_AddCard::cardtype() const {
  return cardtype_;
}
inline void TableUpdate_AddCard::set_cardtype(::google::protobuf::int32 value) {
  set_has_cardtype();
  cardtype_ = value;
}

// -------------------------------------------------------------------

// TableUpdate

// repeated .SevenGamePacket.TableUpdate.AddCard Card = 52;
inline int TableUpdate::card_size() const {
  return card_.size();
}
inline void TableUpdate::clear_card() {
  card_.Clear();
}
inline const ::SevenGamePacket::TableUpdate_AddCard& TableUpdate::card(int index) const {
  return card_.Get(index);
}
inline ::SevenGamePacket::TableUpdate_AddCard* TableUpdate::mutable_card(int index) {
  return card_.Mutable(index);
}
inline ::SevenGamePacket::TableUpdate_AddCard* TableUpdate::add_card() {
  return card_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SevenGamePacket::TableUpdate_AddCard >&
TableUpdate::card() const {
  return card_;
}
inline ::google::protobuf::RepeatedPtrField< ::SevenGamePacket::TableUpdate_AddCard >*
TableUpdate::mutable_card() {
  return &card_;
}

// -------------------------------------------------------------------

// CurrentTurn

// required int32 PlayerIndex = 1;
inline bool CurrentTurn::has_playerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CurrentTurn::set_has_playerindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CurrentTurn::clear_has_playerindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CurrentTurn::clear_playerindex() {
  playerindex_ = 0;
  clear_has_playerindex();
}
inline ::google::protobuf::int32 CurrentTurn::playerindex() const {
  return playerindex_;
}
inline void CurrentTurn::set_playerindex(::google::protobuf::int32 value) {
  set_has_playerindex();
  playerindex_ = value;
}

// required string PlayerName = 2;
inline bool CurrentTurn::has_playername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CurrentTurn::set_has_playername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CurrentTurn::clear_has_playername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CurrentTurn::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& CurrentTurn::playername() const {
  return *playername_;
}
inline void CurrentTurn::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void CurrentTurn::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void CurrentTurn::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CurrentTurn::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* CurrentTurn::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CurrentTurn::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TurnPass

// required int32 PlayerIndex = 1;
inline bool TurnPass::has_playerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TurnPass::set_has_playerindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TurnPass::clear_has_playerindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TurnPass::clear_playerindex() {
  playerindex_ = 0;
  clear_has_playerindex();
}
inline ::google::protobuf::int32 TurnPass::playerindex() const {
  return playerindex_;
}
inline void TurnPass::set_playerindex(::google::protobuf::int32 value) {
  set_has_playerindex();
  playerindex_ = value;
}

// optional int32 TicketCount = 2 [default = 0];
inline bool TurnPass::has_ticketcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TurnPass::set_has_ticketcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TurnPass::clear_has_ticketcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TurnPass::clear_ticketcount() {
  ticketcount_ = 0;
  clear_has_ticketcount();
}
inline ::google::protobuf::int32 TurnPass::ticketcount() const {
  return ticketcount_;
}
inline void TurnPass::set_ticketcount(::google::protobuf::int32 value) {
  set_has_ticketcount();
  ticketcount_ = value;
}

// -------------------------------------------------------------------

// CardSubmit

// required int32 PlayerIndex = 1;
inline bool CardSubmit::has_playerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CardSubmit::set_has_playerindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CardSubmit::clear_has_playerindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CardSubmit::clear_playerindex() {
  playerindex_ = 0;
  clear_has_playerindex();
}
inline ::google::protobuf::int32 CardSubmit::playerindex() const {
  return playerindex_;
}
inline void CardSubmit::set_playerindex(::google::protobuf::int32 value) {
  set_has_playerindex();
  playerindex_ = value;
}

// required int32 CardNum = 2;
inline bool CardSubmit::has_cardnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CardSubmit::set_has_cardnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CardSubmit::clear_has_cardnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CardSubmit::clear_cardnum() {
  cardnum_ = 0;
  clear_has_cardnum();
}
inline ::google::protobuf::int32 CardSubmit::cardnum() const {
  return cardnum_;
}
inline void CardSubmit::set_cardnum(::google::protobuf::int32 value) {
  set_has_cardnum();
  cardnum_ = value;
}

// required int32 CardType = 3;
inline bool CardSubmit::has_cardtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CardSubmit::set_has_cardtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CardSubmit::clear_has_cardtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CardSubmit::clear_cardtype() {
  cardtype_ = 0;
  clear_has_cardtype();
}
inline ::google::protobuf::int32 CardSubmit::cardtype() const {
  return cardtype_;
}
inline void CardSubmit::set_cardtype(::google::protobuf::int32 value) {
  set_has_cardtype();
  cardtype_ = value;
}

// -------------------------------------------------------------------

// Winner

// required int32 PlayerIndex = 1;
inline bool Winner::has_playerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Winner::set_has_playerindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Winner::clear_has_playerindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Winner::clear_playerindex() {
  playerindex_ = 0;
  clear_has_playerindex();
}
inline ::google::protobuf::int32 Winner::playerindex() const {
  return playerindex_;
}
inline void Winner::set_playerindex(::google::protobuf::int32 value) {
  set_has_playerindex();
  playerindex_ = value;
}

// -------------------------------------------------------------------

// UserDie

// required int32 PlayerIndex = 1;
inline bool UserDie::has_playerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserDie::set_has_playerindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserDie::clear_has_playerindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserDie::clear_playerindex() {
  playerindex_ = 0;
  clear_has_playerindex();
}
inline ::google::protobuf::int32 UserDie::playerindex() const {
  return playerindex_;
}
inline void UserDie::set_playerindex(::google::protobuf::int32 value) {
  set_has_playerindex();
  playerindex_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SevenGamePacket

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SevenGamePacket_2eproto__INCLUDED
